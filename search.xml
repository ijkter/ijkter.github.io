<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL基础速览</title>
      <link href="/2019/07/02/sql/"/>
      <url>/2019/07/02/sql/</url>
      
        <content type="html"><![CDATA[<p><font color="#008000"> [Updated] </font> 本文梳理了 SQL 相关基础知识（基于《SQL基础教程》）</p><a id="more"></a><h1 id="SQL-基础"><a href="#SQL-基础" class="headerlink" title="SQL 基础"></a>SQL 基础</h1><hr><h2 id="SQL-概要"><a href="#SQL-概要" class="headerlink" title="SQL 概要"></a>SQL 概要</h2><h3 id="标准-SQL"><a href="#标准-SQL" class="headerlink" title="标准 SQL"></a>标准 SQL</h3><p>国际标准化组织（ISO）为 SQL 制定的相应标准，适用于各种 RDBMS</p><h3 id="SQL-语句及其种类"><a href="#SQL-语句及其种类" class="headerlink" title="SQL 语句及其种类"></a>SQL 语句及其种类</h3><p>由关键字、表名、列名等组合而成一条 SQL 语句描述操作的内容</p><h4 id="DDL（Data-Definition-Language，数据定义语言）"><a href="#DDL（Data-Definition-Language，数据定义语言）" class="headerlink" title="DDL（Data Definition Language，数据定义语言）"></a>DDL（Data Definition Language，数据定义语言）</h4><p>用来创建或者删除存储数据用的数据库以及数据库中的表等对象。包含指令：</p><ul><li>CREATE： 创建数据库和表等对象</li><li>DROP： 删除数据库和表等对象</li><li>ALTER： 修改数据库和表等对象的结构</li></ul><h4 id="DML（Data-Manipulation-Language，数据操纵语言）"><a href="#DML（Data-Manipulation-Language，数据操纵语言）" class="headerlink" title="DML（Data Manipulation Language，数据操纵语言）"></a>DML（Data Manipulation Language，数据操纵语言）</h4><p>用来查询或者变更表中的记录。包含指令：</p><ul><li>SELECT：查询表中的数据</li><li>INSERT：向表中插入新数据</li><li>UPDATE：更新表中的数据</li><li>DELETE：删除表中的数据</li></ul><h4 id="DCL（Data-Control-Language，数据控制语言）"><a href="#DCL（Data-Control-Language，数据控制语言）" class="headerlink" title="DCL（Data Control Language，数据控制语言）"></a>DCL（Data Control Language，数据控制语言）</h4><p>用来确认或者取消对数据库中的数据进行的变更。除此之外，还可以对 RDBMS 的用户是否有权限<br>操作数据库中的对象（数据库表等）进行设定。包含指令：</p><ul><li>COMMIT： 确认对数据库中的数据进行的变更</li><li>ROLLBACK： 取消对数据库中的数据进行的变更</li><li>GRANT： 赋予用户操作权限</li><li>REVOKE： 取消用户的操作权限</li></ul><h3 id="SQL-的基本书写规则"><a href="#SQL-的基本书写规则" class="headerlink" title="SQL 的基本书写规则"></a>SQL 的基本书写规则</h3><ul><li>以分号（；）结尾</li><li>SQL 不区分关键字大小写；表中数据区分大小写</li><li>SQL 一般书写原则：<ul><li>关键字大写</li><li>表名首字母大写</li><li>其余（列名）小写</li></ul></li><li><strong>SQL 子句的顺序不能改变，也不能互相替换</strong></li></ul><h3 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h3><h4 id="数据库的创建（CREATE-DATABASE语句）"><a href="#数据库的创建（CREATE-DATABASE语句）" class="headerlink" title="数据库的创建（CREATE DATABASE语句）"></a>数据库的创建（CREATE DATABASE语句）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure><h4 id="表的创建（CREATE-TABLE语句）"><a href="#表的创建（CREATE-TABLE语句）" class="headerlink" title="表的创建（CREATE TABLE语句）"></a>表的创建（CREATE TABLE语句）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &lt;表名&gt;</span><br><span class="line">(&lt;列名<span class="number">1</span>&gt; &lt;数据类型&gt; &lt;该列所需约束&gt;,</span><br><span class="line"> &lt;列名<span class="number">2</span>&gt; &lt;数据类型&gt; &lt;该列所需约束&gt;,</span><br><span class="line"> ……</span><br><span class="line"> &lt;列名n&gt; &lt;数据类型&gt; &lt;该列所需约束&gt;,</span><br><span class="line"> &lt;该表约束<span class="number">1</span>&gt;, &lt;该表约束<span class="number">2</span>&gt;, ……);</span><br></pre></td></tr></table></figure><ul><li>NOT NULL 约束只能以列为单位进行设置</li><li>列的数据类型必须指定</li><li>列的约束可以定义时设置，也可以语句末尾设置</li></ul><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><ul><li>数据库/表/列名：半角英文字母、数字、下划线(_)</li><li>标准 SQL 中名称必须以半角英文字母开头</li><li>名称不能重复</li></ul><h4 id="数据类型的指定"><a href="#数据类型的指定" class="headerlink" title="数据类型的指定"></a>数据类型的指定</h4><ul><li>INTEGER：整数</li><li>CHAR：定长字符串<ul><li>括号中指定可存储字符串长度</li><li>超出部分无法输入到列中</li><li>不足部分由半角空格进行补足。如：char(10)存”123”，存储字符占10个字节。取数据的时候，char类型的要用trim()去掉多余的空格</li><li>比 VARCHAR 效率高，空间换时间</li></ul></li><li>VARCHAR：可变长字符串<ul><li>括号指定最大长度</li><li>不足部分<strong>不会</strong>使用半角空格进行补足，会自动裁剪。如：varchar(10)存”123”，存储字符占3个字节</li><li>比 CHAR 节省空间</li></ul></li><li>DATE：日期<ul><li>含年/月/日</li><li>Oracle 中 DATE 型还包含时分秒</li></ul></li></ul><h4 id="约束的设置"><a href="#约束的设置" class="headerlink" title="约束的设置"></a>约束的设置</h4><ul><li>键：指定特定数据时使用的列的组合</li><li>主键（primary key）：可以唯一确定一行数据的列（故无法重复）</li></ul><h3 id="表的删除和更新"><a href="#表的删除和更新" class="headerlink" title="表的删除和更新"></a>表的删除和更新</h3><h4 id="表的删除（DROP-TABLE语句）"><a href="#表的删除（DROP-TABLE语句）" class="headerlink" title="表的删除（DROP TABLE语句）"></a>表的删除（DROP TABLE语句）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> &lt;表名&gt;;</span><br></pre></td></tr></table></figure><ul><li>删除表无法回复，只能重建</li><li>避免到需要恢复数据的场景</li></ul><h4 id="表定义的更新（ALTER-TABLE语句）"><a href="#表定义的更新（ALTER-TABLE语句）" class="headerlink" title="表定义的更新（ALTER TABLE语句）"></a>表定义的更新（ALTER TABLE语句）</h4><p>添加列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &lt;表名&gt; <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> &lt;列的定义&gt;;</span><br></pre></td></tr></table></figure><p>删除列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &lt;表名&gt; <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> &lt;列名&gt;;</span><br></pre></td></tr></table></figure><ul><li>表定义变更（ALTER TABLE）之后无法恢复</li><li>不同数据库提供不同<strong>变更表名（RENAME）</strong>（非标准 SQL）指令。如：MySQL 中，</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TABLE</span> &lt;原表名&gt; <span class="keyword">to</span> &lt;新表名&gt;;</span><br></pre></td></tr></table></figure><hr><h2 id="查询基础"><a href="#查询基础" class="headerlink" title="查询基础"></a>查询基础</h2><h3 id="SELECT语句基础"><a href="#SELECT语句基础" class="headerlink" title="SELECT语句基础"></a>SELECT语句基础</h3><h4 id="列的查询"><a href="#列的查询" class="headerlink" title="列的查询"></a>列的查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;列名&gt;，……</span><br><span class="line">  <span class="keyword">FROM</span> &lt;表名&gt;；</span><br></pre></td></tr></table></figure><ul><li>&lt; * &gt; 按表定义列的顺序列出所有列</li><li>不建议使用 &lt; * &gt;；建议列出所有列名，以提高 SQL 可读性</li></ul><h4 id="为列或表设定别名"><a href="#为列或表设定别名" class="headerlink" title="为列或表设定别名"></a>为列或表设定别名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span> <span class="keyword">AS</span> 别名<span class="number">1</span>,</span><br><span class="line">       列名<span class="number">2</span> <span class="keyword">AS</span> 别名<span class="number">2</span></span><br><span class="line">  <span class="keyword">FROM</span> 表名 <span class="keyword">AS</span> 表别名;</span><br></pre></td></tr></table></figure><ul><li>别名可使用中文，使用时将中文用双引号 &lt;” “&gt; 括起来</li><li>别名中空格建议用下划线取代。使用双引号可以设定包含空格的别名，但若忘记使用双引号可能导致错误</li><li>Oracle 的 FROM 子句中不能使用 AS（会发生错误），表别名直接跟在表名后即可（即不加 AS）</li></ul><h4 id="从结果中删除重复行"><a href="#从结果中删除重复行" class="headerlink" title="从结果中删除重复行"></a>从结果中删除重复行</h4><p>使用 DISTINCT 实现删除由<strong>选择列出的列合成的数据</strong>中的重复行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> &lt;列名&gt;, ……</span><br><span class="line">  <span class="keyword">FROM</span> Product;</span><br></pre></td></tr></table></figure><ul><li>使用 DISTINCT 时， NULL 也被视为一类数据（显示为空白）</li><li>DISTINCT 关键字只能用在第一个列名之前</li></ul><h4 id="通过-WHERE-子句来指定查询数据的条件"><a href="#通过-WHERE-子句来指定查询数据的条件" class="headerlink" title="通过 WHERE 子句来指定查询数据的条件"></a>通过 WHERE 子句来指定查询数据的条件</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;列名&gt;, ……</span><br><span class="line">  <span class="keyword">FROM</span> &lt;表名&gt;</span><br><span class="line"> <span class="keyword">WHERE</span> &lt;条件表达式&gt;;</span><br></pre></td></tr></table></figure><ul><li>书写顺序：WHERE 子句必须紧跟在 FROM 子句之后，否则会造成执行错误</li><li>执行顺序：首先通过 WHERE 子句查询出符合指定条件的记录，然后再选取出 SELECT 语句指定的列</li></ul><h4 id="注释的书写方法"><a href="#注释的书写方法" class="headerlink" title="注释的书写方法"></a>注释的书写方法</h4><ul><li>英汉字皆可</li><li>单行注释：书写在 “–” 之后</li><li>多行注释：书写在 “/“ 和 “/“ 之间</li></ul><h3 id="算术运算符和比较运算符"><a href="#算术运算符和比较运算符" class="headerlink" title="算术运算符和比较运算符"></a>算术运算符和比较运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p>SELECT 子句中可以使用<strong>常数</strong>或者<strong>表达式</strong>：+ - * ÷ ()</p><ul><li><p>所有包含 NULL 的计算，结果肯定是 NULL（包括“NULL/0”的情况，不会报错）</p></li><li><p>FROM 子句在 SELECT 语句中并不是必不可少的，只使用SELECT子句进<br>行计算也是可以的，但使用场景很少。如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (<span class="number">1</span> + <span class="number">2</span>) * <span class="number">3</span> <span class="keyword">AS</span> calculation;</span><br></pre></td></tr></table></figure></li><li><p>存在不允许省略 SELECT 语句中的 FROM 子句的 RDBMS。如：Oracle</p></li></ul><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><ul><li>=、&lt;、&gt;：等于、小于、大于</li><li>&lt;&gt;:不相等。“!=” 非标准 SQL，考虑可移植性和安全问题 , 不建议使用</li><li>&lt;=、&gt;=：不大于、不小于。必须不等号在左，等号在右</li><li>字符串类型的数据原则上按照<strong>字典顺序</strong>进行排序。该规则对定长字符串和可变长字符串都适用</li><li>SQL 用“IS NULL”和“IS NOT NULL”判断数据是否为NULL。因为SQL 不识别“= NULL”和“&lt;&gt; NULL”，所以不能对 NULL 使用比较运算符</li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><h4 id="NOT运算符"><a href="#NOT运算符" class="headerlink" title="NOT运算符"></a>NOT运算符</h4><ul><li>NOT 不能单独使用，必须组合其他查询条件表“不是该条件”</li><li>为保持程序清晰可读，不滥用 NOT</li></ul><h4 id="AND-运算符和-OR-运算符"><a href="#AND-运算符和-OR-运算符" class="headerlink" title="AND 运算符和 OR 运算符"></a>AND 运算符和 OR 运算符</h4><ul><li>AND 运算符在其两侧的查询条件都成立时整个查询条件才成立，其<br>意思相当于“并且”</li><li>OR 运算符在其两侧的查询条件有一个成立时整个查询条件都成立，<br>其意思相当于“或者”</li><li>AND 运算符的优先级高于 OR 运算符</li><li>建议使用括号强化优先级，使语句更清晰可读</li></ul><h4 id="真值"><a href="#真值" class="headerlink" title="真值"></a>真值</h4><ul><li>真值：值为真（TRUE） 或假（FALSE） 其中之一的值</li><li>AND 运算的结果与乘法运算（积）的结果一样，称逻辑积</li><li>OR 运算的结果与加法运算（和）的结果一样，称逻辑和</li><li>SQL 特有情况 – 三值逻辑：除真值外，还存在“不确定”（UNKNOWN）这样的值：  <table><thead><tr><th>P</th><th>Q</th><th>P AND Q</th><th>P OR Q</th></tr></thead><tbody><tr><td>真</td><td>不确定</td><td>不确定</td><td>真</td></tr><tr><td>假</td><td>不确定</td><td>假</td><td>不确定</td></tr><tr><td>不确定</td><td>真</td><td>不确定</td><td>真</td></tr><tr><td>不确定</td><td>假</td><td>假</td><td>不确定</td></tr><tr><td>不确定</td><td>不确定</td><td>不确定</td><td>不确定</td></tr></tbody></table></li><li>建议尽量不使用 NULL，为列设置 NOT NULL 约束，以避免繁琐的条件判断</li></ul><hr><h2 id="聚合与排序"><a href="#聚合与排序" class="headerlink" title="聚合与排序"></a>聚合与排序</h2><h3 id="对表进行聚合查询"><a href="#对表进行聚合查询" class="headerlink" title="对表进行聚合查询"></a>对表进行聚合查询</h3><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><p>将多行输入汇总为一行输出</p><ul><li>COUNT： 计算表中的记录数（行数）<ul><li>COUNT(<em>) 特性：不会排除 NULL。故 COUNT(</em>)会得到包含 NULL 的数据行数，而 COUNT(&lt;列名&gt;) 会得到 NULL 之外的数据行数</li></ul></li><li>所有的聚合函数，如果以列名为参数，那么在计算之前会把 NULL 排除在外，<strong>与“等价为 0”并不相同</strong></li><li>SUM： 计算表中 <strong>数值列</strong> 中数据的合计值</li><li>AVG： 计算表中 <strong>数值列</strong> 中数据的平均值<ul><li>会事先删除 NULL 同时减少相应数据条数再计算。但也可以选择将 NULL 改变为 0 进行计算</li></ul></li><li>MAX： 求出表中 <strong>任意列（如日期）</strong> 中数据的最大值</li><li>MIN： 求出表中 <strong>任意列（如日期）</strong>中 数据的最小值</li></ul><h4 id="使用聚合函数删除重复值（关键字DISTINCT）"><a href="#使用聚合函数删除重复值（关键字DISTINCT）" class="headerlink" title="使用聚合函数删除重复值（关键字DISTINCT）"></a>使用聚合函数删除重复值（关键字DISTINCT）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> &lt;列名&gt;)</span><br><span class="line">  <span class="keyword">FROM</span> &lt;表名&gt;;</span><br></pre></td></tr></table></figure><ul><li>DISTINCT 必须写在聚合函数参数（即括号）中，因为必须要在执行之前删除列中的重复数据</li><li>计算值的种类：在 COUNT() 的参数中使用 DISTINCT</li></ul><h3 id="对表进行分组"><a href="#对表进行分组" class="headerlink" title="对表进行分组"></a>对表进行分组</h3><h4 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;列名<span class="number">1</span>&gt;, &lt;列名<span class="number">2</span>&gt;, &lt;列名<span class="number">3</span>&gt;, ……</span><br><span class="line">  <span class="keyword">FROM</span> &lt;表名&gt;</span><br><span class="line"> <span class="keyword">WHERE</span></span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> &lt;列名<span class="number">1</span>&gt;, &lt;列名<span class="number">2</span>&gt;, &lt;列名<span class="number">3</span>&gt;, ……;</span><br></pre></td></tr></table></figure><ul><li>聚合键/分组列：GROUP BY 子句中指定的列</li><li>书写顺序：SELECT → FROM → WHERE → GROUP BY</li><li>执行顺序：FROM → WHERE → GROUP BY → SELECT</li><li>聚合键中包含 NULL 时，在结果中会以“不确定”行（空行）的形式表现出来</li></ul><h3 id="使用聚合函数和-GROUP-BY-注意事项"><a href="#使用聚合函数和-GROUP-BY-注意事项" class="headerlink" title="使用聚合函数和 GROUP BY 注意事项"></a>使用聚合函数和 GROUP BY 注意事项</h3><ul><li>使用聚合函数时， SELECT 子句中<strong>只能</strong>存在以下三种元素：<ul><li>常数</li><li>聚合函数</li><li>GROUP BY 子句中指定的列名（也就是聚合键）</li></ul></li><li>虽然 MySQL 支持使用GROUP BY子句时， SELECT 子句中出现聚合键之外的列名，但是 MySQL 以外的 DBMS 都不支持这样的语法，因此不建议使用</li><li>在 GROUP BY子 句中不能使用 SELECT 子句中定义的别名。根据执行顺序，执行 GROUP BY 子句时，DBMS 还不知道 SELECT 子句中定义的别名</li><li>GROUP BY子句结果的显示是无序的。可在 SELECT 语句中进行指定特定顺序</li><li>只有 SELECT 子句和 HAVING 子句（以及 ORDER BY 子句）中能够使用聚合函数</li><li>DISTINCT 和 GROUP BY：都是通过数据的内部排序处理实现的（执行速度相近），可删除重复数据。根据使用场景，选择能清晰表明语义的写法</li></ul><h3 id="为聚合结果指定条件"><a href="#为聚合结果指定条件" class="headerlink" title="为聚合结果指定条件"></a>为聚合结果指定条件</h3><h4 id="HAVING-子句"><a href="#HAVING-子句" class="headerlink" title="HAVING 子句"></a>HAVING 子句</h4><p>WHERE 子句只能指定记录（行）的条件，而不能用来指定组的条件。对集合指定条件使用 HAVING 子句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;列名<span class="number">1</span>&gt;, &lt;列名<span class="number">2</span>&gt;, &lt;列名<span class="number">3</span>&gt;, ……</span><br><span class="line">  <span class="keyword">FROM</span> &lt;表名&gt;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> &lt;列名<span class="number">1</span>&gt;, &lt;列名<span class="number">2</span>&gt;, &lt;列名<span class="number">3</span>&gt;, ……</span><br><span class="line"><span class="keyword">HAVING</span> &lt;分组结果对应的条件&gt;</span><br></pre></td></tr></table></figure><ul><li>书写顺序：SELECT → FROM → WHERE → GROUP BY → HAVING</li><li>执行顺序：FROM → WHERE → GROUP BY → SELECT</li></ul><h4 id="HAVING-注意事项"><a href="#HAVING-注意事项" class="headerlink" title="HAVING 注意事项"></a>HAVING 注意事项</h4><ul><li>HAVING 子句中<strong>只能</strong>存在以下三种元素：<ul><li>常数</li><li>聚合函数</li><li>GROUP BY 子句中指定的列名（即聚合键）</li></ul></li><li>聚合键所对应的条件应该书写在 WHERE 子句当中，而不应该书写在 HAVING 子句当中。理由如下：<ul><li>HAVING 子句是用来指定“组”的条件的。因此，“行”所对应的条件还是应该写在 WHERE 子句当中，便于理解区分功能</li><li>通常情况下，为了得到相同的结果，将条件写在 WHERE 子句中要比写在 HAVING 子句中的处理速度更快，返回结果所需的时间更短<blockquote><p>为了理解其中原因，就要从 DBMS 的内部运行机制来考虑。使用 COUNT 函<br>数等对表中的数据进行聚合操作时，DBMS 内部就会进行排序处理。排序处理是会大大增加机器负担的高负荷的处理 A。因此，只有尽可能减少排序的行数，才能提高处理速度。通过 WHERE 子句指定条件时，由于排序之前就对数据进行了过滤，因此能够减少排序的数据量。但 HAVING 子句是在排序之后才对数据进行分的，因此与在 WHERE 子句中指定条件比起来，需要排序的数据量就会多得多。虽然 DBMS 的内部处理不尽相同，但是对于排序处理来说，基本上都是一样的。此外， WHERE 子句更具速度优势的另一个理由是，可以对 WHERE 子句指定条件所对应的列创建索引，这样也可以大幅提高处理速度。创建索引是一种非常普遍的提高 DBMS 性能的方法，效果也十分明显，这对 WHERE 子句来说也十分有利。</p></blockquote></li></ul></li></ul><h3 id="对查询结果进行排序"><a href="#对查询结果进行排序" class="headerlink" title="对查询结果进行排序"></a>对查询结果进行排序</h3><h4 id="ORDER-BY子句"><a href="#ORDER-BY子句" class="headerlink" title="ORDER BY子句"></a>ORDER BY子句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;列名<span class="number">1</span>&gt;, &lt;列名<span class="number">2</span>&gt;, &lt;列名<span class="number">3</span>&gt;, ……</span><br><span class="line">  <span class="keyword">FROM</span> &lt;表名&gt;</span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;排序基准列<span class="number">1</span>&gt;, &lt;排序基准列<span class="number">2</span>&gt;, ……;</span><br></pre></td></tr></table></figure><ul><li>书写顺序：SELECT → FROM → WHERE → GROUP BY → HAVING → ORDER BY</li><li>ORDER BY 子句通常写在 SELECT 语句的<strong>末尾</strong></li><li>未指定 ORDER BY子句中排列顺序时会默认使用升序进行排列；使用 DESC 关键字降序排列</li></ul><h4 id="ORDER-BY-注意事项"><a href="#ORDER-BY-注意事项" class="headerlink" title="ORDER BY 注意事项"></a>ORDER BY 注意事项</h4><ul><li>多键排序规则：优先使用左侧的键，如果该列存在相同值的话，再接着参考右侧的键</li><li>排序键中包含 NULL 时，会在开头或末尾进行汇总（因为不能对 NULL 使用比较运算符）</li><li>在 ORDER BY 子句中可以使用 SELECT 子句中定义的别名。因为 <strong>SELECT 子句的执行顺序在 GROUP BY 子句之后， ORDER BY 子句之前</strong></li><li>在 ORDER BY 子句中可以使用 SELECT 子句中未使用的列和聚合函数</li><li>不要使用列编号指定排序键：<ul><li>可读性差</li><li>SQL-92A 中明确该功能将来会被删除<blockquote><p>列编号 – SELECT 子句中的列按照从左到右的顺序进行排列时所对应的编号（1, 2, 3, …）</p></blockquote></li></ul></li></ul><hr><h2 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h2><h3 id="数据的插入（INSERT语句的使用方法）"><a href="#数据的插入（INSERT语句的使用方法）" class="headerlink" title="数据的插入（INSERT语句的使用方法）"></a>数据的插入（INSERT语句的使用方法）</h3><h4 id="INSERT-语句"><a href="#INSERT-语句" class="headerlink" title="INSERT 语句"></a>INSERT 语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;表名&gt; (列<span class="number">1</span>, 列<span class="number">2</span>, 列<span class="number">3</span>, ……) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3</span>, ……);</span><br></pre></td></tr></table></figure><ul><li><p>原则上，执行一次INSERT语句会插入一行数据,表名后面的列清单和 VALUES 子句中的值清单的列数必须保持一致</p></li><li><p>很多 RDBMS 都支持多行 INSERT：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;表名&gt; (列<span class="number">1</span>, 列<span class="number">2</span>, 列<span class="number">3</span>, ……) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3</span>, ……), (值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3</span>, ……) …… ;</span><br></pre></td></tr></table></figure></li><li><p>列清单的省略</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;表名&gt; <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3</span>, ……), (值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3</span>, ……) …… ;</span><br></pre></td></tr></table></figure></li><li><p>插入NULL：插入 NOT NULL 约束的列会报错</p></li><li><p>INSERT， DELETE 和 UPDATE 等更新语句也一样，SQL 语句执行失败时都不会对表中数据造成影响</p></li><li><p>默认插入值<br>在创建表的 CREATE TABLE 语句中设置 DEFAULT 约束来设定默认值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ProductIns</span><br><span class="line">(&lt;列名&gt; <span class="built_in">CHAR</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"> &lt;列名&gt; <span class="built_in">INTEGER</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>, <span class="comment">-- 销售单价的默认值设定为0;</span></span><br><span class="line">……);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>显式方法插入默认值：在 VALUES 中指定 DEFAULT 关键字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;表名&gt; (&lt;列名<span class="number">1</span>&gt;, &lt;列名<span class="number">2</span>&gt;, ……) <span class="keyword">VALUES</span> (<span class="keyword">DEFAULT</span>, <span class="keyword">DEFAULT</span>, ……);</span><br></pre></td></tr></table></figure></li><li><p>隐式方法插入默认值：在列清单和 VALUES 中省略要设定默认值的列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;表名&gt; (&lt;列名<span class="number">1</span>&gt;, &lt;列名<span class="number">3</span>&gt;, ……) <span class="keyword">VALUES</span> (<span class="keyword">DEFAULT</span>, <span class="keyword">DEFAULT</span>, ……); <span class="comment">-- 列2设定默认值</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="从其他表中复制数据"><a href="#从其他表中复制数据" class="headerlink" title="从其他表中复制数据"></a>从其他表中复制数据</h4><ol><li><p>创建一张结构一样的表</p></li><li><p>旧表数据插入新表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 旧表 (&lt;列名<span class="number">1</span>&gt;, &lt;列名<span class="number">2</span>&gt;, ……)</span><br><span class="line"><span class="keyword">SELECT</span> &lt;列名<span class="number">1</span>&gt;, &lt;列名<span class="number">2</span>&gt;, ……</span><br><span class="line"><span class="keyword">FROM</span> 新表;</span><br></pre></td></tr></table></figure></li></ol><ul><li>INSERT 语句的 SELECT 语句中，可以使用 WHERE 子句或者 GROUP BY 子句等何 SQL 语法（除 ORDER BY）</li><li>指定 ORDER BY 子句也没有任何意义，因为无法保证表内部记录的排列顺序</li></ul><h3 id="数据的删除（DELETE语句的使用方法）"><a href="#数据的删除（DELETE语句的使用方法）" class="headerlink" title="数据的删除（DELETE语句的使用方法）"></a>数据的删除（DELETE语句的使用方法）</h3><h4 id="DELETE语句"><a href="#DELETE语句" class="headerlink" title="DELETE语句"></a>DELETE语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> &lt;表名&gt;; <span class="comment">-- 保留数据表，清空表全部数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> &lt;表名&gt; <span class="comment">-- 删除表中指定条件数据</span></span><br><span class="line"> <span class="keyword">WHERE</span> &lt;条件&gt;;</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>DELETE 语句中只能使用 WHERE，而不能使用 GROUP BY、HAVING 和 ORDER BY。因为：<ul><li>GROUP BY 和 HAVING 是从表中选取数据时用来改变抽取数据形式的</li><li>ORDER BY 是用来指定取得结果显示顺序的</li></ul></li></ul><h4 id="TRUNCATE：删除表中全部数据"><a href="#TRUNCATE：删除表中全部数据" class="headerlink" title="TRUNCATE：删除表中全部数据"></a>TRUNCATE：删除表中全部数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> &lt;表名&gt;;</span><br></pre></td></tr></table></figure><ul><li>非标准SQL；Oracle、SQL Server、PostgreSQL、MySQL 和 DB2</li><li>不能通过 WHERE 子句指定条件来删除部分数据</li></ul><h3 id="数据的更新（UPDATE语句的使用方法）"><a href="#数据的更新（UPDATE语句的使用方法）" class="headerlink" title="数据的更新（UPDATE语句的使用方法）"></a>数据的更新（UPDATE语句的使用方法）</h3><h4 id="UPDATE-语句"><a href="#UPDATE-语句" class="headerlink" title="UPDATE 语句"></a>UPDATE 语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> &lt;表名&gt;</span><br><span class="line">   <span class="keyword">SET</span> &lt;列名&gt; = &lt;表达式/<span class="literal">NULL</span>&gt; <span class="comment">-- NULL 只限于未设置 NOT NULL 约束的列</span></span><br><span class="line"> <span class="keyword">WHERE</span> &lt;条件&gt;;</span><br></pre></td></tr></table></figure><h4 id="多列更新"><a href="#多列更新" class="headerlink" title="多列更新"></a>多列更新</h4><ul><li>法一：所有 DBMS 通用</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用逗号对列进行分隔排列</span></span><br><span class="line"><span class="keyword">UPDATE</span> &lt;表名&gt;</span><br><span class="line">   <span class="keyword">SET</span> &lt;列名<span class="number">1</span>&gt; = &lt;表达式<span class="number">1</span>&gt;,</span><br><span class="line">       &lt;列名<span class="number">2</span>&gt; = &lt;表达式<span class="number">2</span>&gt;</span><br><span class="line"> <span class="keyword">WHERE</span> &lt;条件&gt;;</span><br></pre></td></tr></table></figure><ul><li>法二：非通用</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将列用()括起来的清单形式</span></span><br><span class="line"><span class="keyword">UPDATE</span> Product</span><br><span class="line">   <span class="keyword">SET</span> (列名<span class="number">1</span>, 列名<span class="number">2</span>) = (表达式<span class="number">1</span>, 表达式<span class="number">2</span>)</span><br><span class="line"> <span class="keyword">WHERE</span> &lt;条件&gt;;</span><br></pre></td></tr></table></figure><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h4><p>需要在同一个处理单元中执行的一系列更新处理的集合。例如：</p><blockquote><p>现要求完成往表1插入新数据并更新一些旧数据的任务。要完成该任务，插入和更新两种操作都要完成，则一定要使用事务进行处理（将一起要完成的操作打包进一个事务中进行处理）</p></blockquote><h4 id="创建事务"><a href="#创建事务" class="headerlink" title="创建事务"></a>创建事务</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">事务开始语句;</span><br><span class="line">DML语句①;</span><br><span class="line">DML语句②;</span><br><span class="line">……</span><br><span class="line">事务结束语句（ <span class="keyword">COMMIT</span>或者<span class="keyword">ROLLBACK</span>） ;</span><br></pre></td></tr></table></figure><ul><li><p>在标准 SQL 中并没有定义事务的<strong>开始语句</strong>，而是由各个 DBMS 自己来定义的</p><ul><li>SQL Server、PostgreSQL：<blockquote><p>BEGIN TRANSACTIONBEGIN TRANSACTION</p></blockquote></li><li>MySQL：<blockquote><p>START TRANSACTION</p></blockquote></li><li>Oracle、DB2：无</li></ul><p>实际上，几乎所有的数据库产品的事务都无需开始指令。因为大部分情况下，事务在数据库连接建立时就已经开始，并不需要用户再明确发出开始指令</p></li><li><p>事务<strong>结束语句</strong>在所有的 RDBMS 中都是通用，只有 COMMIT 和 ROLLBACK 两种：</p><ul><li>COMMIT – 是提交事务包含的全部更新处理的结束指令，相当于文件处理中的覆盖保存。一旦提交，就无法恢复到事务开始前的状态了</li><li>ROLLBACK – 是取消事务包含的全部更新处理的结束指令，相当于文件处理中的放弃保存。一旦回滚，数据库就会恢复到事务开始之前的状态</li></ul></li><li><p>在不使用指令而悄悄开始事务的情况下，区分各个事务有以下两种模式（通常 DBMS 都可以设置任选其一）：</p><ul><li>自动提交模式 – 每条SQL语句就是一个事务（MySQL、SQL Server 和 PostgreSQL 默认使用）</li><li>直到用户执行 COMMIT 或者 ROLLBACK 为止算作一个事务（Oracle 默认使用）</li></ul></li><li><p>若使用 DELETE 语句删除了数据表：</p><ul><li>自动提交模式下，无法回滚恢复</li><li>非自动提交模式下，可以通过 ROLLBACK 命令取消该事务的处理，恢复表中的数据。但这仅限于明示开始事务，或者关闭自动提交的情况</li></ul></li></ul><h4 id="ACID特性"><a href="#ACID特性" class="headerlink" title="ACID特性"></a>ACID特性</h4><ul><li><p>原子性（Atomicity）</p><p>原子性是指在事务结束时，其中所包含的更新处理要么都执行，要么都不执行</p></li><li><p>一致性（Consistency）/完整性</p><p>一致性指的是事务中包含的处理要满足数据库提前设置的约束</p></li><li><p>隔离性（Isolation）</p><p>隔离性指的是保证不同事务之间互不干扰的特性。该特性保证了事务之间不会互相嵌套。此外，在某个事务中进行的更改，在该事务结束之前，对其他事务而言是不可见的</p></li><li><p>持久性（Durability）</p><p>持久性指的是在事务（不论是提交还是回滚）结束后， DBMS 能够保证该时间点的数据状态会被保存的特性。即使由于系统故障导致数据丢失，数据库也一定能通过某种手段进行恢复，如日志系统</p></li></ul><hr><h2 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h2><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h4 id="视图：保存好的-SELECT-语句"><a href="#视图：保存好的-SELECT-语句" class="headerlink" title="视图：保存好的 SELECT 语句"></a>视图：保存好的 SELECT 语句</h4><ul><li>视图和表区别：表中存储的是实际数据，而视图中保存的是从表中取出数据所使用的SELECT语句</li><li>视图的优点：<ul><li>无需保存数据，节省存储设备的容量</li><li>将频繁使用的 SELECT 语句保存成视图，不用重写重新执行，以提高效率</li></ul></li></ul><h4 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名称(&lt;视图列名<span class="number">1</span>&gt;, &lt;视图列名<span class="number">2</span>&gt;, ……)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">&lt;<span class="keyword">SELECT</span>语句&gt;</span><br></pre></td></tr></table></figure><ul><li>SELECT 语句中列的排列顺序和视图中列的排列顺序相同</li><li>多重视图：以视图为基础创建视图。多重视图会降低 SQL 的性能应尽量避免</li></ul><h4 id="使用视图查询"><a href="#使用视图查询" class="headerlink" title="使用视图查询"></a>使用视图查询</h4><ol><li>首先执行定义视图的 SELECT 语句</li><li>根据得到的结果，再执行在 FROM 子句中使用视图的 SELECT 语句</li></ol><h4 id="视图的限制"><a href="#视图的限制" class="headerlink" title="视图的限制"></a>视图的限制</h4><ul><li><p>定义视图时不能使用 ORDER BY 子句</p><p>视图和表一样， 数据行都是没有顺序的</p></li><li><p>对视图进行更新</p><p>标准 SQL 中规定，想要视图可以被更新，定义视图的 SELECT 语句需要满足某些条件（非通过汇总）：</p><ul><li>SELECT 子句中未使用 DISTINCT</li><li>FROM 子句中只有一张表</li><li>未使用 GROUP BY 子句</li><li>未使用 HAVING 子句</li></ul><p>原因：视图和表需要同时进行更新，以保持数据一致性，因此通过汇总得到的视图无法进行更新</p></li></ul><h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> 视图名称(&lt;视图列名<span class="number">1</span>&gt;, &lt;视图列名<span class="number">2</span>&gt;, ……)；</span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><h4 id="子查询和视图"><a href="#子查询和视图" class="headerlink" title="子查询和视图"></a>子查询和视图</h4><p>子查询就是将用来定义视图的 SELECT 语句直接用于 FROM 子句当中（为查询结果命别名）</p><ul><li>子查询作为内层查询会首先执行</li><li>原则上子查询必须设定名称（使用 AS 关键字）</li></ul><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>标量子查询就是返回单一值的子查询</p><ul><li>优点：返回的是单一值，可以用在 = 或者 &lt;&gt; 等比较运算符之中</li><li>书写位置：能够使用常数或者列名的地方</li><li>注意事项：子查询中只能返回单一值</li></ul><h3 id="关联子查询（建议刷题理解）"><a href="#关联子查询（建议刷题理解）" class="headerlink" title="关联子查询（建议刷题理解）"></a>关联子查询（建议刷题理解）</h3><h4 id="与普通的子查询的区别"><a href="#与普通的子查询的区别" class="headerlink" title="与普通的子查询的区别"></a>与普通的子查询的区别</h4><p>在子查询中添加的 WHERE 子句的条件</p><ul><li>为区别表对应不同的场景，在表所对应的列名之前加上表的别名，形式为“&lt;表名&gt;.&lt;列名&gt;”</li><li>适合在细分的组内进行比较时使用</li><li>结合条件一定要写在子查询中</li></ul><hr><h2 id="函数、谓词、CASE表达式"><a href="#函数、谓词、CASE表达式" class="headerlink" title="函数、谓词、CASE表达式"></a>函数、谓词、CASE表达式</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="函数的种类"><a href="#函数的种类" class="headerlink" title="函数的种类"></a>函数的种类</h4><ul><li>算术函数：数值计算</li><li>字符串函数：字符串操作</li><li>日期函数：日期操作</li><li>转换函数：转换数据类型和值</li><li>聚合函数：数据聚合</li></ul><h4 id="算术函数"><a href="#算术函数" class="headerlink" title="算术函数"></a>算术函数</h4><ul><li>绝对值函数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ABS(数值)</span><br></pre></td></tr></table></figure><ul><li>求余</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOD(被除数，除数)</span><br></pre></td></tr></table></figure><ul><li><p>[注]</p><ul><li>SQL Server 不支持 MOD()，而使用 <strong>“%”</strong> 求余</li></ul></li><li><p>四舍五入</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROUND(对象数值，保留小数的位数)</span><br></pre></td></tr></table></figure><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><ul><li>拼接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串1 || 字符串2 || 字符串3 || ……</span><br></pre></td></tr></table></figure><ul><li><p>[注]</p><ul><li>SQL Server 不支持 ||，而使用 <strong>“+”</strong> 拼接字符串</li><li>MySQL 不支持 ||，而使用 <strong>CONCAT()</strong> 拼接字符串</li></ul></li><li><p>字符串长度</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LENGTH(字符串)</span><br></pre></td></tr></table></figure><ul><li><p>[注]</p><ul><li>SQL Server 不支持 LENGTH()，而使用 <strong>LEN()</strong> 拼接字符串</li><li>同样是 LENGTH 函数，不同 DBMS 的执行结果也不尽相同。MySQL 中的 LENGTH() 以字节为单位的函数进行计算,此外还存在计算字符串长度的自有函数 <strong>CHAR_LENGTH()</strong></li></ul></li><li><p>大小写转换</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPPER/LOWER(字符串)</span><br></pre></td></tr></table></figure><ul><li><p>[注]</p><ul><li>UPPER/LOWER 函数只能针对英文字母使用，将参数中的字符串全都转换为大/小写</li></ul></li><li><p>字符串替换</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REPLACE</span>(对象字符串，替换前的字符串，替换后的字符串)</span><br></pre></td></tr></table></figure><ul><li>字符串截取</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUBSTRING（对象字符串 FROM 截取的起始位置 FOR 截取的字符数）</span><br></pre></td></tr></table></figure><ul><li>[注]<ul><li>标准 SQL，但只有 PostgreSQL 和 MySQL 支持该语法</li><li>SQL Server 版本：<blockquote><p>SUBSTRING(对象字符串，截取的起始位置，截取的字符数)</p></blockquote></li><li>Oracle 版本：<blockquote><p>SUBSTR(对象字符串，截取的起始位置，截取的字符数)</p></blockquote></li></ul></li></ul><h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><ul><li>当前日期</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CURRENT_DATE</span><br></pre></td></tr></table></figure><ul><li><p>[注]</p><ul><li>SQL Server 不支持 CURRENT_DATE，而使用 <strong>CAST(CURRENT_TIMESTAMP AS DATE)</strong> 获取当前日期</li></ul></li><li><p>当前时间</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CURRENT_TIME</span><br></pre></td></tr></table></figure><ul><li><p>[注]</p><ul><li>SQL Server 不支持 CURRENT_TIME，而使用 <strong>CAST(CURRENT_TIMESTAMP AS TIME)</strong> 获取当前时间</li></ul></li><li><p>当前日期和时间</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CURRENT_TIMESTAMP</span><br></pre></td></tr></table></figure><ul><li>截取日期元素</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXTRACT(日期元素 FROM 日期)</span><br></pre></td></tr></table></figure><ul><li>[注]<ul><li>日期元素：<ul><li>YEAR</li><li>MONTH</li><li>DAY</li><li>HOUR</li><li>MINUTE</li><li>SECOND</li></ul></li><li>SQL Server 不支持 EXTRACT 函数，而使用 <strong>DATEPART 函数</strong> 获取当前时间<blockquote><p>DATEPART(日期元素 , CURRENT_TIMESTAMP)</p></blockquote></li></ul></li></ul><h4 id="转换函数"><a href="#转换函数" class="headerlink" title="转换函数"></a>转换函数</h4><ul><li>CAST —— 数据类型转换</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAST（转换前的值 AS 想要转换的数据类型）</span><br></pre></td></tr></table></figure><ul><li><p>[注]</p><ul><li>使用场景：<ul><li>插入与表中数据类型不匹配的数据</li><li>在进行运算时由于数据类型不一致发生了错误</li><li>进行自动类型转换会造成处理速度低下</li></ul></li></ul></li><li><p>COALESCE —— 将NULL转换为其他值</p><p>返回可变参数 A 中左侧开始第 1个不是 NULL 的值</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COALESCE(数据1，数据2，数据3……)</span><br></pre></td></tr></table></figure><h3 id="谓词-–-返回值是真值的函数"><a href="#谓词-–-返回值是真值的函数" class="headerlink" title="谓词 – 返回值是真值的函数"></a>谓词 – 返回值是真值的函数</h3><h4 id="LIKE-–-模糊查询"><a href="#LIKE-–-模糊查询" class="headerlink" title="LIKE – 模糊查询"></a>LIKE – 模糊查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line">  <span class="keyword">FROM</span> &lt;表名&gt;</span><br><span class="line"> <span class="keyword">WHERE</span> &lt;列名&gt; <span class="keyword">LIKE</span> <span class="string">'模式'</span>;</span><br></pre></td></tr></table></figure><ul><li>% 代表“0 个字符以上的任意字符串”</li><li>_（下划线）代表了“任意 1 个字符”</li></ul><table><thead><tr><th>模式</th><th>匹配</th></tr></thead><tbody><tr><td>abc%</td><td><strong>abc</strong>qwe</td></tr><tr><td>%abc%</td><td>qwe<strong>abc</strong>qwe</td></tr><tr><td>%abc</td><td>qwe<strong>abc</strong></td></tr><tr><td>abc__</td><td><strong>abc</strong>qw</td></tr><tr><td><em>abc</em></td><td>e<strong>abc</strong>q</td></tr><tr><td>_abc</td><td>q<strong>abc</strong></td></tr></tbody></table><h4 id="BETWEENT-——-范围查询"><a href="#BETWEENT-——-范围查询" class="headerlink" title="BETWEENT —— 范围查询"></a>BETWEENT —— 范围查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line">  <span class="keyword">FROM</span> &lt;表名&gt;</span><br><span class="line"> <span class="keyword">WHERE</span> &lt;列名&gt; <span class="keyword">BETWEEN</span> &lt;上限&gt; <span class="keyword">AND</span> &lt;下限&gt;;</span><br></pre></td></tr></table></figure><ul><li>数据可以是数值、文本或者日期</li><li>BETWEEN 的结果包含 &lt;上限&gt; 和 &lt;下限&gt;。不想让结果包含临界值则使用 &lt; 和 &gt;</li></ul><h4 id="IS-NOT-NULL-——-判断是否为NULL"><a href="#IS-NOT-NULL-——-判断是否为NULL" class="headerlink" title="IS (NOT) NULL —— 判断是否为NULL"></a>IS (NOT) NULL —— 判断是否为NULL</h4><p>选取出某些值为（不为） NULL 的列的数据只能使用特定的谓词 IS (NOT) NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line">  <span class="keyword">FROM</span> &lt;表名&gt;</span><br><span class="line"> <span class="keyword">WHERE</span> &lt;列名&gt; <span class="keyword">IS</span> (<span class="keyword">NOT</span>) <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h4 id="IN-谓词-——-OR-的简便用法"><a href="#IN-谓词-——-OR-的简便用法" class="headerlink" title="IN 谓词 —— OR 的简便用法"></a>IN 谓词 —— OR 的简便用法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line">  <span class="keyword">FROM</span> &lt;表名&gt;</span><br><span class="line"> <span class="keyword">WHERE</span> &lt;列名&gt; (<span class="keyword">NOT</span>) <span class="keyword">IN</span> (集合元素……/子查询);</span><br></pre></td></tr></table></figure><ul><li>使用 IN 和 NOT IN 无法选取出 NULL 数据，因为 NULL 只能使用 IS (NOT) NULL 选取</li></ul><h4 id="EXIST-谓词"><a href="#EXIST-谓词" class="headerlink" title="EXIST 谓词"></a>EXIST 谓词</h4><p>判断是否存在满足某条件的<strong>记录</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line">  <span class="keyword">FROM</span> &lt;表名&gt;</span><br><span class="line"> <span class="keyword">WHERE</span> &lt;列名&gt; (<span class="keyword">NOT</span>) EXIST (集合元素……/子查询);</span><br></pre></td></tr></table></figure><ul><li>通常指定关联子查询作为 EXIST 的参数</li><li>由于 EXIST 只关心<strong>记录</strong>是否存在，因此子查询中返回哪些列都没有关系（建议统一在 EXIST 的子查询中书写 SELECT *）</li><li>与 in 执行时的区别：<br>in 先执行子查询中的查询，再执行主查询；exists 先执行主查询，即外层表的查询，再执行子查询。效率视情况而定</li></ul><h3 id="CASE-表达式-–-区分情况执行"><a href="#CASE-表达式-–-区分情况执行" class="headerlink" title="CASE 表达式 – 区分情况执行"></a>CASE 表达式 – 区分情况执行</h3><h4 id="CASE表达式"><a href="#CASE表达式" class="headerlink" title="CASE表达式"></a>CASE表达式</h4><ul><li>搜索 CASE 表达式语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE WHEN &lt;求值表达式&gt; THEN &lt;表达式&gt;</span><br><span class="line">     WHEN &lt;求值表达式&gt; THEN &lt;表达式&gt;</span><br><span class="line">     WHEN &lt;求值表达式&gt; THEN &lt;表达式&gt;</span><br><span class="line">     ……</span><br><span class="line">     ELSE &lt;表达式&gt;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><ul><li>执行过程：<ol><li>第一条 WHEN 子句中的“&lt; 求值表达式 &gt;”求值</li><li>结果为真（TRUE），返回 THEN 子句中的表达式， 执行完毕；结果不为真，顺次转到下一条 WHEN 子句进行求值……</li><li>若到最后一条 WHEN 子句为止返回结果都不为真，则返回 ELSE 中的表达式</li><li>执行完毕</li></ol></li><li>ELSE 子句也可以省略不写，这时会被默认为 ELSE NULL，但不建议省略</li><li>END 不能省略</li></ul><hr><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><h3 id="表的集合运算（以行方向为单位进行操作）"><a href="#表的集合运算（以行方向为单位进行操作）" class="headerlink" title="表的集合运算（以行方向为单位进行操作）"></a>表的集合运算（以行方向为单位进行操作）</h3><h4 id="Def"><a href="#Def" class="headerlink" title="Def"></a>Def</h4><p>进行这些集合运算时，会导致记录行数的增减，但不会导致列数的改变</p><h4 id="UNION（并集）"><a href="#UNION（并集）" class="headerlink" title="UNION（并集）"></a>UNION（并集）</h4><p>表 a 和 表 b 的并集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;列名&gt;, ……</span><br><span class="line">  <span class="keyword">FROM</span> &lt;a 表名&gt;</span><br><span class="line"> <span class="keyword">UNION</span> （<span class="keyword">ALL</span>）</span><br><span class="line"><span class="keyword">SELECT</span> &lt;列名&gt;, ……</span><br><span class="line">  <span class="keyword">FROM</span> &lt;b 表名&gt;;</span><br></pre></td></tr></table></figure><h4 id="INTERSECT（交集）"><a href="#INTERSECT（交集）" class="headerlink" title="INTERSECT（交集）"></a>INTERSECT（交集）</h4><p>表 a 和 表 b 的交集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;列名&gt;, ……</span><br><span class="line">  <span class="keyword">FROM</span> &lt;a 表名&gt;</span><br><span class="line"><span class="keyword">INTERSECT</span> （<span class="keyword">ALL</span>）</span><br><span class="line"><span class="keyword">SELECT</span> &lt;列名&gt;, ……</span><br><span class="line">  <span class="keyword">FROM</span> &lt;b 表名&gt;;</span><br></pre></td></tr></table></figure><h4 id="EXCEPT（差集）"><a href="#EXCEPT（差集）" class="headerlink" title="EXCEPT（差集）"></a>EXCEPT（差集）</h4><p>表 a 和 表 b 的差集，即表 a 除去与表 b 交集部分所剩余的部分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;列名&gt;, ……</span><br><span class="line">  <span class="keyword">FROM</span> &lt;a 表名&gt;</span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line"><span class="keyword">SELECT</span> &lt;列名&gt;, ……</span><br><span class="line">  <span class="keyword">FROM</span> &lt;b 表名&gt;;</span><br></pre></td></tr></table></figure><ul><li>MySQL 不支持 EXCEPT</li><li>Oracle 中求差集将 “EXCEPT” 改为 “MINUS”</li></ul><h4 id="集合运算注意事项"><a href="#集合运算注意事项" class="headerlink" title="集合运算注意事项"></a>集合运算注意事项</h4><ul><li>集合运算符会除去重复的记录。使用 <strong>ALL</strong> 选项，可以保留重复行</li><li>作为运算对象的记录的<strong>列数必须相同</strong></li><li>作为运算对象的记录中列的类型必须一致</li><li>可以使用任何 SELECT 语句，但 ORDER BY 子句只能在最后使用一次</li></ul><h3 id="联结（以列为单位对表进行联结）"><a href="#联结（以列为单位对表进行联结）" class="headerlink" title="联结（以列为单位对表进行联结）"></a>联结（以列为单位对表进行联结）</h3><h4 id="Def-1"><a href="#Def-1" class="headerlink" title="Def"></a>Def</h4><p>将其他表中的列添加过来，进行“添加列”的运算</p><h4 id="内联结——INNER-JOIN"><a href="#内联结——INNER-JOIN" class="headerlink" title="内联结——INNER JOIN"></a>内联结——INNER JOIN</h4><p>以<strong>两张表中都包含的列（联结键）</strong>作为桥梁，将<strong>只存在于一张表内的列</strong>汇集到同一结果之中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;表<span class="number">1</span>别名&gt;.&lt;列名&gt;, …， &lt;表<span class="number">2</span>别名&gt;.&lt;列名&gt;, …</span><br><span class="line">  <span class="keyword">FROM</span> &lt;表<span class="number">1</span>&gt; <span class="keyword">AS</span> &lt;表<span class="number">1</span>别名&gt;</span><br><span class="line"> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> &lt;表<span class="number">2</span>&gt; <span class="keyword">AS</span> &lt;表<span class="number">2</span>别名&gt;</span><br><span class="line">    <span class="keyword">ON</span> 表<span class="number">1.</span>&lt;共同列&gt; = 表<span class="number">2.</span>&lt;共同列&gt;</span><br><span class="line"> <span class="keyword">WHERE</span> ……</span><br></pre></td></tr></table></figure><h4 id="外联结——OUTER-JOIN"><a href="#外联结——OUTER-JOIN" class="headerlink" title="外联结——OUTER JOIN"></a>外联结——OUTER JOIN</h4><p>通过 ON 子句的联结键将两张表进行联结，并从两张表中同时选取相应的列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;表<span class="number">1</span>别名&gt;.&lt;列名&gt;, …， &lt;表<span class="number">2</span>别名&gt;.&lt;列名&gt;, …</span><br><span class="line">  <span class="keyword">FROM</span> &lt;表<span class="number">1</span>&gt; <span class="keyword">AS</span> &lt;表<span class="number">1</span>别名&gt;</span><br><span class="line">  <span class="keyword">LEFT</span>/<span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> &lt;表<span class="number">2</span>&gt; <span class="keyword">AS</span> &lt;表<span class="number">2</span>别名&gt;</span><br><span class="line">    <span class="keyword">ON</span> 表<span class="number">1.</span>&lt;共同列&gt; = 表<span class="number">2.</span>&lt;共同列&gt;</span><br><span class="line"> <span class="keyword">WHERE</span> ……</span><br></pre></td></tr></table></figure><ul><li>与内联结区别<ul><li>内联结只能选取出同时存在于两张表中的数据</li><li>对于外联结，只要数据存在于某一张表当中，就能够读取<br>出来</li></ul></li><li>外联结中使用LEFT、RIGHT来指定主表，最终的结果中会包含主表内所有的数据</li></ul><h4 id="多表联结"><a href="#多表联结" class="headerlink" title="多表联结"></a>多表联结</h4><p>通过 ON 子句的联结键将多张表进行联结。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;表<span class="number">1</span>别名&gt;.&lt;列名&gt;, …， &lt;表<span class="number">2</span>别名&gt;.&lt;列名&gt;, …</span><br><span class="line">  <span class="keyword">FROM</span> &lt;表<span class="number">1</span>&gt; <span class="keyword">AS</span> &lt;表<span class="number">1</span>别名&gt;</span><br><span class="line"> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> &lt;表<span class="number">2</span>&gt; <span class="keyword">AS</span> &lt;表<span class="number">2</span>别名&gt;</span><br><span class="line">    <span class="keyword">ON</span> 表<span class="number">1.</span>&lt;共同列&gt; = 表<span class="number">2.</span>&lt;共同列&gt;</span><br><span class="line">      <span class="keyword">INNER</span> <span class="keyword">JOIN</span> &lt;表<span class="number">3</span>&gt; <span class="keyword">AS</span> &lt;表<span class="number">3</span>别名&gt;</span><br><span class="line">         <span class="keyword">ON</span> 表<span class="number">1.</span>&lt;共同列&gt; = 表<span class="number">3.</span>&lt;共同列&gt;</span><br><span class="line"> <span class="keyword">WHERE</span> ……</span><br></pre></td></tr></table></figure><ul><li>如下例子中表 1 与表 2 联结，表 1 与表 3 联结，则表 2 与表 3 无需再联结</li><li>“表 1 与表 3 联结”改为“表 2 与表 3 联结”，效果一样</li></ul><hr><h2 id="SQL-高级处理"><a href="#SQL-高级处理" class="headerlink" title="SQL 高级处理"></a>SQL 高级处理</h2><h3 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h3><h4 id="窗口函数的语法"><a href="#窗口函数的语法" class="headerlink" title="窗口函数的语法"></a>窗口函数的语法</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;窗口函数&gt; OVER (PARTITION BY &lt;列清单&gt;)</span><br><span class="line">                  ORDER BY &lt;排序用列清单&gt;)</span><br></pre></td></tr></table></figure><ul><li><p>通过 PARTITION BY 分组后的记录集合称为“窗口”（意指“范围”）。PARTITION BY 并非必需，不指定 PARTITION BY 时，将整个表作为一个大的窗口来使用</p></li><li><p>OVER 子句中的 ORDER BY 只是用来决定<br>窗口函数按照什么样的顺序进行计算的，对结果的排列顺序并没有影响。对结果排序需要在 SELECT 语句的最后使用 ORDER BY 子句，此时两个 ORDER BY 功能完全不同</p></li><li><p>窗口函数兼具分组和排序两种功能</p></li><li><p>能够作为窗口函数使用的函数</p><ul><li>能够作为窗口函数的聚合函数（SUM、AVG、COUNT、MAX、MIN）</li><li>RANK、DENSE_RANK、ROW_NUMBER 等专用窗口函数</li></ul></li><li><p>以专用窗口函数 RANK 为例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;列<span class="number">1</span>&gt;, &lt;列<span class="number">2</span>&gt;, &lt;列<span class="number">3</span>&gt;， …</span><br><span class="line">  <span class="keyword">RANK</span> () <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> &lt;列<span class="number">2</span>&gt;</span><br><span class="line">                  <span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;列<span class="number">3</span>&gt;) <span class="keyword">AS</span> ranking</span><br><span class="line">  <span class="keyword">FROM</span> &lt;表名&gt;;</span><br></pre></td></tr></table></figure><ul><li>PARTITION BY 能够设定排序的对象范围</li><li>ORDER BY 能够指定按照哪一列、何种顺序进行排序</li></ul></li></ul><h4 id="专用窗口函数"><a href="#专用窗口函数" class="headerlink" title="专用窗口函数"></a>专用窗口函数</h4><ul><li><p>RANK函数</p><p>计算排序时，如果存在相同位次的记录，则会跳过之后的位次。</p><ul><li>例：有 3 条记录排在第 1 位时：1 位、1 位、1 位、4 位……</li></ul></li><li><p>DENSE_RANK函数</p><p>同样是计算排序，即使存在相同位次的记录，也不会跳过之后的位次。</p><ul><li>例：有 3 条记录排在第 1 位时：1 位、1 位、1 位、2 位……</li></ul></li><li><p>ROW_NUMBER函数</p><p>赋予唯一的连续位次。</p><ul><li>例：有 3 条记录排在第 1 位时：1 位、2 位、3 位、4 位……</li></ul></li><li><p>专用窗口函数无需参数，因此通常参数括号中都是空的</p></li></ul><h4 id="作为窗口函数使用的聚合函数"><a href="#作为窗口函数使用的聚合函数" class="headerlink" title="作为窗口函数使用的聚合函数"></a>作为窗口函数使用的聚合函数</h4><p>以专用 AVG() 为例</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;列<span class="number">1</span>&gt;, &lt;列<span class="number">2</span>&gt;, &lt;列<span class="number">3</span>&gt;， …，</span><br><span class="line">  <span class="keyword">AVG</span> (指定列) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;指定列&gt;) <span class="keyword">AS</span> ranking</span><br><span class="line">  <span class="keyword">FROM</span> &lt;表名&gt;;</span><br></pre></td></tr></table></figure><ul><li>得到的结果按照 ORDER BY 子句指定列的升序排列，一行一行逐渐添加计算对象，<strong>累计</strong>进行聚合函数运算</li><li>聚合函数作为窗口函数时的最大特征：以当前记录作为基准进行统计</li></ul><h4 id="窗口函数的适用范围"><a href="#窗口函数的适用范围" class="headerlink" title="窗口函数的适用范围"></a>窗口函数的适用范围</h4><p>原则上，窗口函数只能书写在 SELECT 子句中。</p><blockquote><p>在 DBMS 内部，窗口函数是对 WHERE 子句或者 GROUP BY 子句处理后的“结果”进行的操作。大家仔细想一想就会明白，在得到用户想要的结果之前，即使进行了排序处理，结果也是错误的。在得到排序结果之后，如果通过 WHERE 子句中的条件除去了某些记录，或者使用 GROUP BY 子句进行了汇总处理，那好不容易得到的排序结果也无法<br>使用了。反之，之所以在 ORDER BY 子句中能够使用窗口函数，是因为 ORDER BY 子句会在 SELECT 子句之后执行，并且记录保证不<br>会减少。</p></blockquote><p>因此，在 SELECT 子句之外“使用窗口函数是没有意义的。</p><h4 id="计算移动平均"><a href="#计算移动平均" class="headerlink" title="计算移动平均"></a>计算移动平均</h4><p>移动平均（moving average）常用于希望实时把握“最近状态”的场景，如数据的实时跟踪</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;列<span class="number">1</span>&gt;, &lt;列<span class="number">2</span>&gt;, &lt;列<span class="number">3</span>&gt;， …，</span><br><span class="line">   <span class="keyword">AVG</span> &lt;指定列&gt; <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;指定列&gt; <span class="keyword">ROWS</span> n <span class="keyword">PRECEDING</span>)</span><br><span class="line"><span class="keyword">FROM</span> &lt;表名&gt;;</span><br></pre></td></tr></table></figure><p>使用了 ROWS（“行”）和 PRECEDING（“之前”）两个关键字，将框架指定为“截止到之前 n 行”<br>，即：自身（当前记录）、之前第 1 行、 ……、 之前第 ~ 行，共 n+1 行</p><ul><li>框架:在窗口中指定更加详细的汇总范围</li><li>FOLLOWING（“之后”）可替换 PRECEDING，指定“截止到之后 ~ 行”作为框架</li></ul><h3 id="GROUPING-运算符"><a href="#GROUPING-运算符" class="headerlink" title="GROUPING 运算符"></a>GROUPING 运算符</h3><h4 id="ROLLUP"><a href="#ROLLUP" class="headerlink" title="ROLLUP"></a>ROLLUP</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">GROUPING</span>(聚合键)， <span class="keyword">SUM</span>(求和列) <span class="keyword">AS</span> sum_指定列</span><br><span class="line">  <span class="keyword">FROM</span> &lt;表名&gt;</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">ROLLUP</span>(聚合键);</span><br></pre></td></tr></table></figure><p>可一次计算出按不同聚合键组合的求和结果</p><ul><li>此处聚合键和 GROUP BY 子句使用一样，可以为 NULL，可以指定多列</li><li>GROUP BY 不指定聚合键时会默认使用 NULL 作为聚合键（相当于没有使用 GROUP BY），此时会得到全部数据的合计行的记录，称超级分组</li><li>GROUPING 函数在其参数列的值为超级分组记录所产生的 NULL 时返回 1，其他情况返回 0，以分辨出原始数据中的 NULL 和超级分组记录中的 NULL</li><li>在 MySQL 中 GROUP BY 子句应改写为“GROUP BY &lt;指定列&gt; WITH ROLLUP;”</li></ul><h4 id="CUBE"><a href="#CUBE" class="headerlink" title="CUBE"></a>CUBE</h4><p>CUBE 将 GROUP BY 子句中聚合键的“所有可能的组合”的汇总结果集中到一个结果中。因此，组合的个数就是 $2^n$（n 是聚合键的个数）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">GROUPING</span>(聚合键)， <span class="keyword">SUM</span>(求和列) <span class="keyword">AS</span> sum_指定列</span><br><span class="line">  <span class="keyword">FROM</span> &lt;表名&gt;</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">CUBE</span>(聚合键);</span><br></pre></td></tr></table></figure><p>可以把 CUBE 理解为将使用聚合键进行切割的模块堆积成一个立方体</p><h4 id="GROUPING-SETS"><a href="#GROUPING-SETS" class="headerlink" title="GROUPING SETS"></a>GROUPING SETS</h4><p>CUBE 的结果就是根据聚合键的所有可能的组合计算而来的，使用 GROUPING SETS 可以取得部分组合的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">GROUPING</span>(聚合键)， <span class="keyword">SUM</span>(求和列) <span class="keyword">AS</span> sum_指定列</span><br><span class="line">  <span class="keyword">FROM</span> &lt;表名&gt;</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">GROUPING</span> <span class="keyword">SETS</span>(&lt;聚合键组合<span class="number">1</span>&gt;, &lt;聚合键组合<span class="number">2</span>&gt;, …);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + NexT 的问题</title>
      <link href="/2019/06/30/hexo_problem_list/"/>
      <url>/2019/06/30/hexo_problem_list/</url>
      
        <content type="html"><![CDATA[<p><font color="#FF0000"> [Updating] </font> 本文记录了 Hexo + NexT 使用过程中的一些问题</p><a id="more"></a><p>版本声明</p><ul><li>hexo: 3.9.0</li><li>next: 7.0.1</li></ul><h2 id="local-search-不能用"><a href="#local-search-不能用" class="headerlink" title="local_search 不能用"></a>local_search 不能用</h2><p>打开首页（本地or线上），打开浏览器开发工具 Network 选项卡，点击首页“搜索”按钮，观察 search.xml 状态：</p><ul><li>200<ul><li>问题：Algolia 问题</li><li>解决：<strong>主题配置</strong>文件中关闭 Algolia</li></ul></li><li>404</li><li>其他<ul><li>问题：存在非法字符</li><li>解决：sublime 排查 .md 文件中所存在非法字符</li></ul></li></ul><h2 id="post-meta-不显示更新时间"><a href="#post-meta-不显示更新时间" class="headerlink" title="post_meta 不显示更新时间"></a>post_meta 不显示更新时间</h2><p>修改主题配置文件，post_meta 模块中设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updated:</span><br><span class="line"> enable: true</span><br><span class="line"> anotherday: false</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github + Hexo 搭建博客</title>
      <link href="/2019/05/30/hexo/"/>
      <url>/2019/05/30/hexo/</url>
      
        <content type="html"><![CDATA[<p><font color="#FF0000"> [Updating] </font> 本文记录了使用Github和Hexo搭建该博客的过程</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>系统：ubuntu 18.04</li><li>nodejs:：</li></ul><h2 id="Hexo-的安装"><a href="#Hexo-的安装" class="headerlink" title="Hexo 的安装"></a>Hexo 的安装</h2><h3 id="Node-js-的安装"><a href="#Node-js-的安装" class="headerlink" title="Node.js 的安装"></a>Node.js 的安装</h3><h3 id="Hexo-的安装-1"><a href="#Hexo-的安装-1" class="headerlink" title="Hexo 的安装"></a>Hexo 的安装</h3><h2 id="Git-的安装"><a href="#Git-的安装" class="headerlink" title="Git 的安装"></a>Git 的安装</h2><h2 id="初步优化"><a href="#初步优化" class="headerlink" title="初步优化"></a>初步优化</h2>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 数学公式语法</title>
      <link href="/2018/01/28/markdown-formula/"/>
      <url>/2018/01/28/markdown-formula/</url>
      
        <content type="html"><![CDATA[<p><font color="#008000"> [Updated] </font> 本文记录了 Markdown 数学公式语法</p><a id="more"></a><h1 id="Markdown-数学公式语法"><a href="#Markdown-数学公式语法" class="headerlink" title="Markdown 数学公式语法"></a>Markdown 数学公式语法</h1><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><h3 id="公式类型"><a href="#公式类型" class="headerlink" title="公式类型"></a>公式类型</h3><h4 id="行内公式"><a href="#行内公式" class="headerlink" title="行内公式"></a>行内公式</h4><p>将公式插入到本行内。使用一个 “$” 包裹数学公式。</p><p>极限：$\displaystyle \lim_{n \to +\infty}{x_n = \alpha}$</p><h4 id="独行公式"><a href="#独行公式" class="headerlink" title="独行公式"></a>独行公式</h4><p>将公式插入到新的一行内，并且居中。使用两个 “$$” 包裹数学公式。极限：</p><p>$$<br>\displaystyle \lim_{n \to +\infty}{x_n = \alpha}<br>$$</p><h3 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h3><table><thead><tr><th>上下标</th><th>语法</th><th>预览</th></tr></thead><tbody><tr><td>^</td><td>x^2</td><td>$x^2$</td></tr><tr><td>_</td><td>x_1</td><td>$x_1$</td></tr></tbody></table><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="普通运算"><a href="#普通运算" class="headerlink" title="普通运算"></a>普通运算</h4><table><thead><tr><th>运算</th><th>语法</th><th>预览</th></tr></thead><tbody><tr><td>加</td><td>+</td><td>$+$</td></tr><tr><td>减</td><td>-</td><td>$-$</td></tr><tr><td>乘</td><td>\times</td><td>$\times$</td></tr><tr><td>除</td><td>\div</td><td>$\times$</td></tr><tr><td>开方</td><td>\sqrt[n]{x}</td><td>$\sqrt[n]{x}$</td></tr><tr><td>加减</td><td>\pm</td><td>$\pm$</td></tr><tr><td>减加</td><td>\mp</td><td>$\mp$</td></tr><tr><td>绝对值</td><td>| |</td><td>$</td></tr><tr><td>分数</td><td>\frac{b}{a}</td><td>$\frac{b}{a}$</td></tr><tr><td>分数</td><td>{b} \voer {a}</td><td>${b} \over {a}$</td></tr></tbody></table><h4 id="对数运算"><a href="#对数运算" class="headerlink" title="对数运算"></a>对数运算</h4><table><thead><tr><th>运算</th><th>语法</th><th>预览</th></tr></thead><tbody><tr><td>对数</td><td>\log</td><td>$\log$</td></tr><tr><td>ln</td><td>\ln</td><td>$\ln$</td></tr><tr><td>lg</td><td>\lg</td><td>$\lg$</td></tr></tbody></table><h4 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h4><table><thead><tr><th>运算</th><th>语法</th><th>预览</th></tr></thead><tbody><tr><td>空集</td><td>\emptyset</td><td>$\emptyset$</td></tr><tr><td>属于</td><td>\in</td><td>$\in$</td></tr><tr><td>不属于</td><td>\notin</td><td>$\notin$</td></tr><tr><td>⊂</td><td>\subset</td><td>$\subset$</td></tr><tr><td>⊃</td><td>\supset</td><td>$\supset$</td></tr><tr><td>⊆</td><td>\subseteq</td><td>$\subseteq$</td></tr><tr><td>⊇</td><td>\supseteq</td><td>$\supseteq$</td></tr><tr><td>⊇</td><td>\bigcap</td><td>$\bigcap$</td></tr><tr><td>⋃</td><td>\bigcup</td><td>$\bigcup$</td></tr><tr><td>⋁</td><td>\bigvee</td><td>$\bigvee$</td></tr><tr><td>⋀</td><td>\bigwedge</td><td>$\bigwedge$</td></tr></tbody></table><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><table><thead><tr><th>运算</th><th>语法</th><th>预览</th></tr></thead><tbody><tr><td>因为</td><td>\because</td><td>$\because$</td></tr><tr><td>所以</td><td>\therefore</td><td>$\therefore$</td></tr><tr><td>任取</td><td>\forall</td><td>$\forall$</td></tr><tr><td>存在</td><td>\exists</td><td>$\exists$</td></tr><tr><td>不等于</td><td>\neq</td><td>$\neq$</td></tr><tr><td>不属于</td><td>\not\subset</td><td>$\not\subset$</td></tr></tbody></table><h4 id="微积分运算"><a href="#微积分运算" class="headerlink" title="微积分运算"></a>微积分运算</h4><table><thead><tr><th>运算</th><th>语法</th><th>预览</th></tr></thead><tbody><tr><td>极限</td><td>\lim</td><td>$\lim$</td></tr><tr><td>无穷</td><td>\infty</td><td>$\infty$</td></tr><tr><td>积分</td><td>\int</td><td>$\int$</td></tr><tr><td>重积分</td><td>\int（i 的个数为重数）</td><td>$\iiint$</td></tr><tr><td>曲线积分</td><td>\oint</td><td>$\oint$</td></tr></tbody></table><h4 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h4><table><thead><tr><th>运算</th><th>语法</th><th>预览</th></tr></thead><tbody><tr><td>度数</td><td>90^\circ</td><td>$90^\circ$</td></tr><tr><td>∠</td><td>\angle</td><td>$\angle$</td></tr><tr><td>sin</td><td>\sin</td><td>$\sin$</td></tr><tr><td>cos</td><td>\cos</td><td>$\cos$</td></tr><tr><td>tan</td><td>\tan</td><td>$\tan$</td></tr></tbody></table><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><table><thead><tr><th>字母</th><th>语法</th><th>预览</th></tr></thead><tbody><tr><td>Δ</td><td>\Delta</td><td>$\Delta$</td></tr><tr><td>Θ</td><td>\Theta</td><td>$\Theta$</td></tr><tr><td>Σ</td><td>\Sigma（’S’ 大写）</td><td>$\Sigma$</td></tr><tr><td>Ω</td><td>\Omega（’O’ 大写）</td><td>$\Omega$</td></tr><tr><td>α</td><td>\alhpa</td><td>$\alpha$</td></tr><tr><td>β</td><td>\beta</td><td>$\beta$</td></tr><tr><td>γ</td><td>\gamma</td><td>$\gamma$</td></tr><tr><td>δ</td><td>\delta</td><td>$\delta$</td></tr><tr><td>ϵ</td><td>\epsilon</td><td>$\epsilon$</td></tr><tr><td>η</td><td>\eta</td><td>$\eta$</td></tr><tr><td>θ</td><td>\theta</td><td>$\theta$</td></tr><tr><td>κ</td><td>\kappa</td><td>$\kappa$</td></tr><tr><td>λ</td><td>\lambda</td><td>$\lambda$</td></tr><tr><td>μ</td><td>\mu</td><td>$\mu$</td></tr><tr><td>ν</td><td>\nu</td><td>$\nu$</td></tr><tr><td>π</td><td>\pi</td><td>$\pi$</td></tr><tr><td>σ</td><td>\sigma（’s’ 小写）</td><td>$\sigma$</td></tr><tr><td>τ</td><td>\tau</td><td>$\tau$</td></tr><tr><td>ω</td><td>\omega（’o’ 小写）</td><td>$\omega$</td></tr><tr><td>ξ</td><td>\xi</td><td>$\xi$</td></tr><tr><td>ρ</td><td>\rho</td><td>$\rho$</td></tr></tbody></table><h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><h4 id="求和公式"><a href="#求和公式" class="headerlink" title="求和公式"></a>求和公式</h4><pre><code>\displaystyle \sum_{i=1}^n \frac{1}{i}</code></pre><p>预览：</p><p>$$<br>\displaystyle \sum_{i=1}^n \frac{1}{i}<br>$$</p><h4 id="求积公式"><a href="#求积公式" class="headerlink" title="求积公式"></a>求积公式</h4><pre><code>\displaystyle \prod_{i=1}^n i</code></pre><p>预览：</p><p>$$<br>\displaystyle \prod_{i=1}^n i<br>$$</p><h4 id="求积分"><a href="#求积分" class="headerlink" title="求积分"></a>求积分</h4><pre><code>\displaystyle \int_0^{1} x dx</code></pre><p>预览：</p><p>$$<br>\displaystyle \int_0^{1} x dx<br>$$</p><h4 id="求极限"><a href="#求极限" class="headerlink" title="求极限"></a>求极限</h4><pre><code>\displaystyle \lim_{n \rightarrow +\infty} \frac{1}{n(n+1)}</code></pre><p>预览：</p><p>$$<br>\displaystyle \lim_{n \rightarrow +\infty} \frac{1}{n}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 基础语法</title>
      <link href="/2018/01/22/markdown-basic/"/>
      <url>/2018/01/22/markdown-basic/</url>
      
        <content type="html"><![CDATA[<p><font color="#008000"> [Updated] </font> 本文记录了 Markdown 基础语法</p><a id="more"></a><h1 id="Markdown-基础语法"><a href="#Markdown-基础语法" class="headerlink" title="Markdown 基础语法"></a>Markdown 基础语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*这是斜体*</span></span><br><span class="line"><span class="emphasis">_这是斜体_</span></span><br><span class="line"><span class="strong">**这是粗体**</span></span><br><span class="line"><span class="strong">__这是粗体__</span></span><br><span class="line"><span class="strong">***这是粗斜体**</span>*</span><br><span class="line"><span class="strong">___这是粗斜体__</span>_</span><br></pre></td></tr></table></figure><h3 id="预览-1"><a href="#预览-1" class="headerlink" title="预览"></a>预览</h3><p><em>这是斜体</em></p><p><em>这是斜体</em></p><p><strong>这是粗体</strong></p><p><strong>这是粗体</strong></p><p><strong><em>这是粗斜体</em></strong></p><p><strong><em>这是粗斜体</em></strong></p><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>第一项</span><br><span class="line"><span class="bullet">* </span>第二项</span><br><span class="line"></span><br><span class="line"><span class="bullet">+ </span>第一项</span><br><span class="line"><span class="bullet">+ </span>第二项</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>第一项</span><br><span class="line"><span class="bullet">- </span>第二项</span><br></pre></td></tr></table></figure><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>第一项</span><br><span class="line"><span class="bullet">2. </span>第二项</span><br><span class="line"><span class="bullet">3. </span>第三项</span><br></pre></td></tr></table></figure><h4 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>第一项</span><br><span class="line"><span class="bullet">2. </span>第二项</span><br><span class="line"><span class="bullet">    - </span>第一项</span><br><span class="line"><span class="bullet">    - </span>第二项</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>第一项</span><br><span class="line"><span class="bullet">    - </span>第一项</span><br><span class="line"><span class="bullet">    - </span>第二项</span><br><span class="line"><span class="bullet">- </span>第二项</span><br></pre></td></tr></table></figure><h3 id="预览-2"><a href="#预览-2" class="headerlink" title="预览"></a>预览</h3><h4 id="无序列表-1"><a href="#无序列表-1" class="headerlink" title="无序列表"></a>无序列表</h4><ul><li>第一项</li><li>第二项</li></ul><ul><li>第一项</li><li>第二项</li></ul><ul><li>第一项</li><li>第二项</li></ul><h4 id="有序列表-1"><a href="#有序列表-1" class="headerlink" title="有序列表"></a>有序列表</h4><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h4 id="嵌套列表-1"><a href="#嵌套列表-1" class="headerlink" title="嵌套列表"></a>嵌套列表</h4><ol><li>第一项</li><li>第二项<ul><li>第一项</li><li>第二项</li></ul></li></ol><ul><li>第一项<ul><li>第一项</li><li>第二项</li></ul></li><li>第二项</li></ul><hr><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 最外层</span></span><br><span class="line">&gt;&gt; 第一层嵌套</span><br><span class="line">&gt;&gt;&gt; 第二层嵌套</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 区块列表</span></span><br><span class="line"><span class="quote">&gt; 1. 第一项</span></span><br><span class="line"><span class="quote">&gt; 2. 第二项</span></span><br><span class="line"><span class="quote">&gt; 3. 第三项</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>第一项</span><br><span class="line"><span class="code">    &gt; 外层区块</span></span><br><span class="line"><span class="code">        &gt; 内外层区块</span></span><br><span class="line"><span class="bullet">- </span>第二项</span><br></pre></td></tr></table></figure><h3 id="预览-3"><a href="#预览-3" class="headerlink" title="预览"></a>预览</h3><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><blockquote><p>区块列表</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><ul><li>第一项<blockquote><p>区块</p></blockquote></li><li>第二项</li></ul><hr><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><h4 id="单行代码"><a href="#单行代码" class="headerlink" title="单行代码"></a>单行代码</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`import sys`</span></span><br></pre></td></tr></table></figure><h4 id="多行代码"><a href="#多行代码" class="headerlink" title="多行代码"></a>多行代码</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```python    &lt;-指定语言</span></span><br><span class="line"><span class="code">`import sys`</span></span><br><span class="line"><span class="code">```.</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import sys   &lt;-一个Tab指定代码区块</span><br></pre></td></tr></table></figure><h3 id="预览-4"><a href="#预览-4" class="headerlink" title="预览"></a>预览</h3><h4 id="单行代码-1"><a href="#单行代码-1" class="headerlink" title="单行代码"></a>单行代码</h4><p><code>import sys</code></p><h4 id="多行代码-1"><a href="#多行代码-1" class="headerlink" title="多行代码"></a>多行代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br></pre></td></tr></table></figure><p>或</p><pre><code>import sys</code></pre><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h4 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">col1 | col2 | col3</span><br><span class="line"><span class="bullet">- </span>| - | -</span><br><span class="line">row1<span class="emphasis">_1 | row1_</span>2 | row1_3</span><br><span class="line">row2<span class="emphasis">_1 | row2_</span>2 | row2_3</span><br></pre></td></tr></table></figure><h4 id="预览-5"><a href="#预览-5" class="headerlink" title="预览"></a>预览</h4><table><thead><tr><th>col1</th><th>col2</th><th>col3</th></tr></thead><tbody><tr><td>row1_1</td><td>row1_2</td><td>row1_3</td></tr><tr><td>row2_1</td><td>row2_2</td><td>row2_3</td></tr></tbody></table><hr><h2 id="插入链接-图片"><a href="#插入链接-图片" class="headerlink" title="插入链接/图片"></a>插入链接/图片</h2><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><h4 id="插入普通链接"><a href="#插入普通链接" class="headerlink" title="插入普通链接"></a>插入普通链接</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">本站地址</span>](<span class="link">https://xhzs.github.io/</span>)</span><br><span class="line"></span><br><span class="line">这是本站地址：&lt;[链接地址](https://xhzs.github.io/)&gt;</span><br></pre></td></tr></table></figure><h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"图片的本地/线上地址"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="预览-6"><a href="#预览-6" class="headerlink" title="预览"></a>预览</h3><h4 id="普通链接"><a href="#普通链接" class="headerlink" title="普通链接"></a>普通链接</h4><p><a href="https://xhzs.github.io/">这是本站地址</a></p><p>这是本站地址：&lt;<a href="https://xhzs.github.io/">链接地址</a>&gt;</p><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><img src="图片的本地/线上地址" width="50%">]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 chrome 下 jupyter-notebook 异常问题</title>
      <link href="/2018/01/16/chrome-jupyter-exception/"/>
      <url>/2018/01/16/chrome-jupyter-exception/</url>
      
        <content type="html"><![CDATA[<p><font color="#008000"> [Updated] </font>本文记录了 chrome 运行 jupyter-notebook 所出现的异常及解决方法</p><a id="more"></a><h1 id="解决-chrome-下-jupyter-notebook-异常问题"><a href="#解决-chrome-下-jupyter-notebook-异常问题" class="headerlink" title="解决 chrome 下 jupyter-notebook 异常问题"></a>解决 chrome 下 jupyter-notebook 异常问题</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>chrome 下使用 jupyter-notebook 出现以下问题：</p><ul><li>按 tab 键补全后自动移至下一单元格</li><li>括号自动补全出问题。如：按 “(“ 打印 “(()”</li></ul><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>开启了某些 chrome 扩展程序所致</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>采用排除法测试出引起问题的 chrome 拓展程序，将其关闭</p>]]></content>
      
      
      <categories>
          
          <category> chrome 使用问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chrome </tag>
            
            <tag> jupyter-notebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 chrome 安装插件失败问题</title>
      <link href="/2018/01/14/chrome-install-extension/"/>
      <url>/2018/01/14/chrome-install-extension/</url>
      
        <content type="html"><![CDATA[<p><font color="#008000"> [Updated] </font>本文记录了 chrome 离线安装插件失败的问题及解决方法</p><a id="more"></a><h1 id="解决-chrome-安装插件失败问题"><a href="#解决-chrome-安装插件失败问题" class="headerlink" title="解决 chrome 安装插件失败问题"></a>解决 chrome 安装插件失败问题</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>chrome 离线安装插件失败。页面左上角显示：</p><blockquote><p>Package is invalid:’CRX_HEADER_INVALID’</p></blockquote><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>以安装 example.crx 为例：</p><ol><li>备份 example.crx，以防误操作或错误情况</li><li>将 example.crx 更改后缀名为 .rar 或 .zip</li><li>解压 example.rar(.zip) 到 example 文件夹，文件夹内包含：example.js、icon.png、manifest.json</li><li>打开 chrome 拓展页面，右上角开关开启开发者模式后，左上角点击“加载已解压拓展程序”，选择步骤 3 中解压的 example 文件夹，安装成功</li></ol>]]></content>
      
      
      <categories>
          
          <category> chrome 使用问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/2018/01/06/computer-struct/"/>
      <url>/2018/01/06/computer-struct/</url>
      
        <content type="html"><![CDATA[<p><font color="#008000"> [Updated] </font>本文梳理了《计算机组成原理》的基础知识</p><a id="more"></a><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><table><thead><tr><th align="center">Chapter 1</th><th align="center">Chapter 2</th><th align="center">Chapter 3</th><th align="center">Chapter 4</th><th align="center">Chapter 5</th><th align="center">Chapter 6</th><th align="center">Chapter 7</th><th align="center">Chapter 8</th></tr></thead><tbody><tr><td align="center"><a href="#bus">总线</a></td><td align="center"><a href="#mm">存储器</a></td><td align="center"><a href="#io">I/O</a></td><td align="center"><a href="#cal">计算的运算方法</a></td><td align="center"><a href="#instruct">指令系统</a></td><td align="center"><a href="#cpu">CPU</a></td><td align="center"><a href="#cu1">控制单元</a></td><td align="center"><a href="#cu2">控制单元的设计</a></td></tr></tbody></table><hr><h4 id="总线"><a href="#总线" class="headerlink" title="总线"></a><span id="bus">总线</span></h4><ul><li><p>判优控制</p><p>  ！当总线上各个主设备同时请求占用总线时，总线控制器按一定优先等级确定某个设备可以占用总线。</p><p>  ？总线特点为某一刻时刻只允许一个设备向总线发送信息，若两个以上部件同时向总线发送信息，势必导致信号冲突传输无效。</p><ul><li>链式查询<ul><li>1 BR、1 BS、1 BG</li><li>优：优先级固定；结构简单、易扩充</li><li>缺：电路故障敏感，第i个有故障，第i个以后皆无法工作</li></ul></li><li>计数器定时查询<ul><li>1 BR、1 BS、1bN设备地址线</li><li>优：优先级可不固定；电路故障不如链式查询敏感</li><li>缺：控制比链式查询复杂</li></ul></li><li>独立请求<ul><li>N BR、N BS、N BG</li><li>优：响应速度快；优先级控制灵活，可预先固定，也可通过程序改变；可屏蔽设备请求</li><li>缺：仲裁线路复杂</li></ul></li></ul></li><li><p>通信控制</p><p>  ！解决通信双方如何获知传输开始和传输结束，以及通信双方如何协调配合。</p><p>  ？因为总线由众多部件共享，在传送时间上只能用分时方式解决，故通信双方必须按某种约定的方式进行通信。</p><ul><li>同步通信<ul><li>采用公共时钟信号控制，统一传输周期（必须按最慢速度部件设计）</li><li>适用：总线长度较短，各部件存取时间相较一致</li></ul></li><li>异步通信<ul><li>没有公共时钟，采用应答式通信，无固定传输周期</li><li>全互锁（完全制约，可靠性最高）/半互锁（简单制约）/不互锁（无制约）</li><li>适用：总线各部件速度不一致</li></ul></li><li>分离式通信<ul><li>总线传输周期分为两个子周期供不同模块占用，总线上无等待时间，最充分发挥了总线的有效占用</li></ul></li><li>半同步通信<ul><li>既有公共时钟，又允许速度不同的模块和谐工作，采用插入等待周期的措施协调通信双方的配合问题</li></ul></li></ul></li><li><p>串行传输与并行传输</p><ul><li>串行传输<ul><li>数据在一条线路上按位依次传输</li><li>成本低，但速度慢，适合远距离的传输</li></ul></li><li>并行传输<ul><li>每个数据位都有一条独立传输线路，所有数据按位同时传输</li><li>成本高，速度快，适合近距离、高速传输</li></ul></li></ul></li><li><p>总线复用</p><ul><li>不同信号（数据/地址）共用同一组物理线路，分时使用</li><li>需先给地址信号，然后用地址锁存信号将其保存</li></ul></li><li><p>总线带宽（MBps）：单位时间总线上可传输数据位数，也称“数据传输率”</p><ul><li>影响因素：总线宽度、传输距离、主频</li><li>总线带宽 = 一个传输周期传输字节数/时钟周期 | 一个传输周期传输字节数*时钟频率</li></ul></li></ul><hr><h4 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a><span id="mm">存储器</span></h4><ul><li><p>芯片：16K×8位/16KB</p><ul><li>地址线 = 14根</li><li>数据线 = 32根</li><li>引出线最少数目 = 数据线+地址线+2</li></ul></li><li><p>多体结构存储器</p><p>  将存储器分成若干个（n个）独立的模块，每个模块的容量和存取周期均相等，且可独立进行读写操作。将独立模块：</p><ul><li>高位交叉编址<ul><li>各模块分别响应不同请求源，实现多体并行</li><li>高位–存体号，低位–选择存储体内的字</li></ul></li><li>低位交叉编址，<ul><li>不改变存取周期的前提下，增加存储器带宽，n个模块则带宽提高至n倍</li><li>高位–选择存储体内的字，低位–存体号</li><li>存取周期T，总线传输周期t，连续读取n个字时间=T+（n-1）t</li></ul></li></ul></li><li><p>提高访存的措施</p><ul><li>采用高速器件，选用存取周期短的芯片，提高存储器速度</li><li>采用缓存，CPU将近期要用的信息先调入缓存，而缓存速度比主存快得多，CPU从缓存存取信息则缩短访存时间，提高了访存速度</li><li>调整主存结构，如采用单体多字结构或多体结构（都增加存储器带宽）</li></ul></li><li><p>程序访问的局部性原理</p><ul><li>由于指令和数据在主存的地址分布不是随机的，而是相对地聚簇，故程序执行时对存储器的访问使不均匀的</li><li>利用该原理：对缓存-主存，把CPU最近期执行的程序放在容量较小速度较高的缓存中；对主存-辅存，把程序中访问频度高、比较活跃的部分放在主存中。既提高了访存速度又扩大了存储器容量</li></ul></li><li><p>地址映射（硬件完成）</p><ul><li>直接<ul><li>假设C块缓存，每个主存块j只与一个缓存块i对应：i = j mod C</li><li>映射简单，但主存块只能固定对应某个缓存块，不够灵活、命中率低</li></ul></li><li>全相联<ul><li>主存任一块都可以映射到缓存中的任一块上</li><li>灵活、命中率高，但所需电路多、成本高</li></ul></li><li>组相联<ul><li>把缓存分Q组，组内分R块，主存块号j映射到缓存组号i内任一块：i = j mod Q，缓存内1~R任一块</li><li>比直接灵活、命中率高，比全相联成本低，是两者的折中，广泛应用</li></ul></li></ul></li><li><p>三级存储系统（平衡–速度、容量、价格）</p><ul><li>高速缓存<ul><li>解决：CPU和主存速度匹配，提高访存速度缓存</li><li>管理：硬件和操作系统完成</li><li>地址对用户透明</li></ul></li><li>虚存<ul><li>解决：扩大存储容量</li><li>管理：硬件和操作系统完成</li><li>CPU不直接访问二级存储器</li></ul></li></ul></li><li><p>RAM刷新</p><ul><li>方式：集中/分散/异步</li><li>原因：存储电荷电容放电    </li></ul></li></ul><hr><h4 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a><span id="io">I/O</span></h4><ul><li><p>I/O编址方式</p><ul><li>独立编址：I/O地址与主存地址分开，不占主存容量，但需要专用I/O指令访I/O</li><li>统一编址：在主存地址划出一定范围作I/O地址，通过访存指令访问I/O，但减少了主存容量</li></ul></li><li><p>主机与I/O交换信息的控制方式</p><ul><li>程序查询<ul><li>主机与I/O串行工作</li></ul></li><li>程序中断<ul><li>主机与I/O并行工作,主程序和信息传送串行</li></ul></li><li>DMA<ul><li>主机与I/O并行工作,主程序和信息传送并行</li></ul></li><li>通道</li><li>I/O处理机</li></ul></li><li><p>程序查询</p><ul><li>CPU启动I/O后停止现行程序，插入一段程序时刻查询I/O设备准备状况，等待I/O准备就绪时可实现信息交换，存在“踏步”现象</li></ul></li><li><p>程序中断</p><ul><li>管理（多重）中断硬件<ol><li>中断请求触发器（INT）：标志中断源向CPU提出中断请求</li><li>中断屏蔽触发器（MASK）：为“1”表示屏蔽该中断源</li><li>排队器：中断判优</li><li>向量地址形成部件：产生中断源向量地址</li><li>允许中断触发器（EINT）：为“1”允许处理中断</li><li>中断标志触发器（INTR）：标志进入中断周期</li><li>堆栈：保护现场</li><li>中断查询信号电路：每条指令执行周期结束时刻，向各中断源发查询信号</li></ol></li><li>过程：<ol><li>中断请求：CPU启动I/O设备，I/O准备就绪后向CPU提出中断请求</li><li>中断判优：中断判优逻辑选择优先级最高的中断请求，待CPU处理</li><li>中断响应：若INT（中断请求触发器）为”1”且请求中断设备未被屏蔽，系统进入中断响应周期–CPU自动执行中断隐指令[ 硬件完成：保护程序断点(即PC内容)、硬件关中断、向量地址送PC（硬件向量法）或中断识别程序入口地址送PC（软件查询法） ]</li><li>中断服务：中断响应周期结束，CPU转入取指周期，按向量地址取出无条件转移指令（或按向量地址查入口地址表）；转至向量地址对应的中断程序服务入口地址，开始执行中断服务程序[ 保护现场（PC内容–中断隐指令；寄存器内容–软件编程）、与I/O传送信息、恢复现场 ]</li><li>中断返回：中断服务程序最后一条即中断返回指令（返回程序断点）</li></ol></li><li>响应条件和时间：<ul><li>条件：EINT为“1”（即开中断）；中断请求未被屏蔽，且排队后被选中</li><li>时间：指令执行阶段的结束时刻，CPU发出中断查询信号，才能获取中断请求信号</li></ul></li><li>向量地址<ul><li>存放服务程序入口地址的存储单元地址，由硬件形成</li><li>当有中断请求且排队选中时，通过自由组合逻辑电路组成的向量地址形成部件可形成向量地址</li><li>输入：排队器；输出：中断周期送至PC；传送：<strong>数据总线</strong></li></ul></li><li>开/关中断<ul><li>EINT为“1”时，允许CPU响应中断；EINT为“0”时，CPU不能响应中断</li><li>关中断即将EINT置“0”；开中断即置“1”</li></ul></li></ul></li><li><p>多重中断(主要区别在中断服务程序)：CPU处理中断过程中出现新的中断请求，暂停现行中断处理转至处理新的中断</p><ul><li>多重中断条件<ul><li>必须重新开中断</li><li>优先级更高的中断请求才能中断现行程序（内部中断&gt;不可屏蔽中断&gt;可屏蔽中断）</li></ul></li><li>单重中断：保护现场-&gt;设备服务-&gt;恢复现场-&gt;<strong>开中断</strong>-&gt;中断返回</li><li>多重中断：保护现场-&gt;<strong>开中断</strong>-&gt;设备服务-&gt;恢复现场-&gt;中断返回</li></ul></li><li><p>中断服务程序与调用子程序区别</p><ol><li>中断服务程序与中断时CPU正在运行程序相互独立；子程序与CPU正在运行程序是同一程序的两部分</li><li>除了软中断，中断通常随机产生；子程序调用由CALL指令引起</li><li>中断服务程序入口地址可通过硬件向量法产生向量地址，再由向量地址找到入口地址；子程序调用入口地址由CALL指令地址码给出</li><li>中断需要对多个同时发生的中断进行裁决；子程序调用无此操作</li></ol><ul><li>都要保护程序断点：前者中断隐指令完成；后者CALL指令完成</li><li>都要保护寄存器内容的操作</li></ul></li><li><p>中断和DMA区别</p><ul><li>数据传送：中断靠程序传送；DMA靠硬件传送</li><li>CPU响应时间：中断在一条指令执行结束时响应；DMA在存取周期结束时响应</li><li>异常处理能力：中断有；DMA无</li><li>保护现场：中断需中断现行程序，需保护现场；DMA不需中断现行程序，无需保护现场</li><li>优先级：DMA高于中断</li></ul></li><li><p>DMA</p><ul><li>特点：<ul><li>I/O和CPU并行工作</li><li>主存和I/O接口间有一条直接数据通路</li><li>不中断现行程序，无需保护、恢复现场</li><li>DMA请求占用总线时，若采用周期挪用，CPU暂停一个存取周期访问主存，但可继续自身内部操作（如乘法），即DMA传送和主程序并行</li></ul></li><li>硬件：数据缓存寄存器、DAR、AR、WC、中断机构、DMA控制逻辑</li><li>过程：<ul><li>预处理<ol><li>指明数据传送方向输入（读）/输出（写）</li><li>设备地址送DAR（设备地址寄存器）</li><li>主存地址送AR（主存地址计数器）</li><li>传送数据字数送WC（字计数器）</li><li>启动设备</li></ol></li><li>数据传送<ol><li>主存地址送总线</li><li>数据送I/O设备（或主存）</li><li>修改主存地址和WC</li><li>重复直至数据块传送结束</li></ol></li><li>后处理<ol><li>由中断服务程序作DMA结束处理（测试传送过程是否出错、决定是否继续使用DMA传送数据）</li></ol></li></ul></li><li>DMA和CPU分时使用主存：<ul><li>停止CPU访存<ul><li>DMA在传送数据时独占主存，CPU放弃总线使用权，基本处于不工作或保持原状态，直至DMA传送结束</li></ul></li><li>周期挪用<ul><li>一旦I/O有DMA请求，由I/O设备挪用一个存取周期。此时CPU<strong>可完成自身操作，但要停止访存</strong></li></ul></li><li>DMA和CPU交替访存<ul><li>适用<strong>CPU工作周期比主存存取周期长</strong>时。CPU工作周期的上下半周期由DMA和CPU交替使用访存，使DMA传送和CPU工作效率最高，但硬件逻辑复杂</li></ul></li></ul></li></ul></li></ul><hr><h4 id="计算的运算方法"><a href="#计算的运算方法" class="headerlink" title="计算的运算方法"></a><span id="cal">计算的运算方法</span></h4><ul><li><p>判溢出</p><ul><li>定点机<ul><li>参与运算的两个操作数符号相同，结果的符号与原操作数符号不同，则溢出</li><li>求和时最高进位与次高进位异或结果为1，则溢出</li></ul></li><li>浮点机判溢出<ul><li>当阶码大于最大正阶码时，则溢出</li><li>当阶码小于最小负阶码时，则按机器零处理</li></ul></li></ul></li><li><p>进位：影响加减运算速度的关键</p><ul><li>进位链：传递进位的逻辑电路</li><li>先行进位：高位进位和低位进位同时产生<ul><li>单重分组跳跃进位<ul><li>n位全加器分若干小组，组内进位同时产生，组间串行进位</li></ul></li><li>多重分组跳跃进位<ul><li>n位全加器分若干大组，若干大组内又包含若干小组，大组内各小组进位同时产生，小组内进位同时产生，大组间串行进位</li><li>快于单重，但线路更复杂</li></ul></li></ul></li></ul></li></ul><hr><h4 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a><span id="instruct">指令系统</span></h4><ul><li>不同地址格式指令</li></ul><table><thead><tr><th align="center">地址格式</th><th align="center">访存次数</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">四地址</td><td align="center">4</td><td align="center">A4指出下条指令地址</td></tr><tr><td align="center">三地址</td><td align="center">4</td><td align="center">PC指出下条指令地址</td></tr><tr><td align="center">二地址</td><td align="center">4</td><td align="center">操作结果存回A1、A2或ACC</td></tr><tr><td align="center">一地址</td><td align="center">4</td><td align="center">ACC存放操作数和结果</td></tr></tbody></table><ul><li><p>数据存放方式。存储字长32位，可按字节、半字、字寻址：</p><ul><li>边界对准：数据字地址一定是4的整数倍。所存数据不满足该要求时，填充一个或多个空白字节（浪费存储空间）</li><li>边界不对准：数据字跨两个存储字时需两次访存，并对高低字节位置进行调整后才能取得数据字（影响取数时间）</li></ul></li><li><p>间址/基址/变址：可扩大寻址范围</p><ul><li>通过访存（多次间址多次访存）得到有效地址<ul><li>间址<ul><li>访存导致时间较长（T一次访存 &gt;&gt; T一次寄存器）</li></ul></li></ul></li><li>地址变换（R+A）得到有效地址<ul><li>基址<ul><li>基址寄存器内容由操作系统给定，且在程序执行过程中不可变</li><li>支持多道程序技术的应用</li></ul></li><li>变址<ul><li>变址寄存器内容由用户给定，且在程序执行过程中可变</li><li>适用于处理数组问题</li></ul></li></ul></li></ul></li><li><p>相对/堆栈寻址</p><ul><li>相对：EA = (PC) + A<ul><li>A为位移量（字节），决定寻址范围；可正可负，补码表示</li><li>便于程序浮动，用于转移指令</li></ul></li><li>堆栈：SP +/- ▲ -&gt; PC<ul><li>有效地址在SP中，指令中可少一个指令字段</li><li>▲与主存编址方式相关：按字编址，▲取1；按字节编址，字长16位时▲取2，字长32时▲取4</li></ul></li></ul></li><li><p>RISC（CISC）</p><ol><li>选用频度高简单指令，复杂指令功能由简单指令实现（指令系统复杂庞大）</li><li>指令长度固定，指令格式种类少，寻址方式种类少（不固定、多、多）</li><li>只有LOAD/STORE访存，其余指令皆在寄存器进行（可访存指令不受限制）</li><li>CPU中有多个通用寄存器（设专用寄存器）</li><li>控制器采用组合逻辑控制（微程序）</li><li>采用流水技术，大部分指令1个时钟周期内完成（各指令执行时间相差大，大部分需多个时钟周期）</li><li>采用优化的编译程序（难以用优化编译生成高效代码）</li></ol><ul><li>与CISC比较：<ul><li>提高指令执行速度</li><li>便于设计，可降低硬件设计复杂度</li><li>简化指令功能，有利于编译程序代码优化</li><li>不易实现指令系统兼容</li></ul></li></ul></li></ul><hr><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a><span id="cpu">CPU</span></h4><ul><li><p>CPU</p><ul><li>功能<ul><li>指令控制：控制程序的顺序执行</li><li>操作控制：产生完成每条指令所需控制命令</li><li>时间控制：对各种操作加以时间上的控制</li><li>数据加工：对数据进行算术和逻辑运算</li><li>中断处理：处理计算机在运行过程中出现的异常情况和特殊请求</li></ul></li><li>组成<ul><li>寄存器<ul><li>PC：存放现行指令地址，位数取决于存储器容量</li><li>IR：存放现行指令，位数取决于指令字长</li><li>通用寄存器：存放数据和地址，位数取决于机器字长</li></ul></li><li>指令译码器 + 控制单元CU：根据指令译码在规定时间发出操作命令</li><li>ALU：算术逻辑运算</li><li>中断系统：处理中断</li></ul></li></ul></li><li><p>指令周期：取指+（间址）+执行+（中断）</p><ul><li>执行 -&gt; 中断周期 -&gt; 取值</li><li>存取周期 -&gt; DMA周期 -&gt; 存取周期（指令周期任一阶段皆可）</li></ul></li><li><p>指令流水</p><ul><li>结构相关<ul><li>硬件资源满足不了指令重叠执行的要求，发生资源冲突</li><li>如：同一时间，几条重叠的指令分别取值、取数、存数，发生访存冲突</li></ul></li><li>数据相关<ul><li>指令重叠执行，可能改变操作数的读写访问顺序，导致数据相关冲突</li><li>如：某条指令需要用到前面指令的执行结果，而这些指令在流水线中重叠执行，可能改变对操作数读写访问顺序</li></ul></li><li>控制相关<ul><li>流水线遇到分支指令或其他改变程序计数器PC的指令，造成指令执行顺序的改变</li><li>如：某条指令需等前面指令做出转移方向的决定才能进入流水线</li></ul></li></ul></li><li><p>流水线多发技术</p><ul><li>超标量流水：每个时钟周期内可同时并发多条独立指令，处理器中需配置多个功能部件和指令译码电路，以便同时执行多个操作</li><li>超流水线：在原来的时钟周期内，功能部件被使用多次</li><li>超长指令字：对编译器要求高，充分挖掘指令间潜在并行性（一个时钟周期内，各功能部件无数据相关），把能并行的指令合成一条具有多个操作码（需相应个数功能部件）的超长指令</li></ul></li><li><p>中断系统</p><ul><li>INTR 与 EINT<ul><li>INTR 中断标志触发器：指示CPU是否进入中断周期</li><li>EINT 允许中断触发器：开放或关闭中断系统<ul><li>置“1”：系统开放，允许中断（开中断指令）</li><li>置“0”：关中断（关中断指令、中断隐指令、硬件自动复位）</li></ul></li></ul></li><li>中断判优：在某一时刻可能有多个中断源（中断源请求随机）提出请求，而CPU只能响应一个，故须判优已解决响应优先次序<ul><li>硬件排队：组合逻辑电路实现</li><li>软件排队：程序按优先级（从高至低）顺序查询各中断源</li></ul></li><li>中断服务程序入口地址寻找<ul><li>硬件向量法（向量中断）：当有中断请求时，由硬件产生该中断源对应的向量地址，再由向量地址找到服务程序的入口地址，然后暂停现行程序转至中断服务程序<ul><li>排队器输出 -&gt; <strong>向量地址形成部件</strong> -&gt; 输出向量地址</li><li>向量地址寻找入口地址方式<ul><li>向量地址单元内存放一条无条件转移指令</li><li>在向量地址单元内直接存放入口地址，形成一个中断向量地址表</li></ul></li></ul></li><li>软件查询法：编写<strong>中断识别程序</strong>实现</li></ul></li><li>屏蔽<ul><li>屏蔽触发器：内容即屏蔽字，每个中断源对应一个屏蔽字，为“1”时CPU不响应该中断源请求</li><li>优先级<ul><li>响应优先级：CPU响应各中断源请求的优先次序，通常硬件线路已设置好，不便改动（不采用屏蔽时）</li><li>处理优先级：CPU实际对各中断源请求的处理优先次序（采用屏蔽）</li></ul></li><li>采用屏蔽技术的中断服务流程<ul><li>保护现场 -&gt; 置屏蔽字 -&gt; 开中断 -&gt; 中断服务 -&gt; 关中断 -&gt; 恢复现场 -&gt; 恢复屏蔽字 -&gt; 开中断 -&gt; 中断返回</li></ul></li><li>作用<ul><li>改变处理优先级</li><li>为实现多重中断，屏蔽低级别中断请求对现行中断处理程序的干扰 </li><li>封锁部分中断请求，使程序控制更灵活</li></ul></li></ul></li></ul></li></ul><hr><h4 id="控制单元"><a href="#控制单元" class="headerlink" title="控制单元"></a><span id="cu1">控制单元</span></h4><ul><li><p>控制单元CU</p><ul><li>功能：发出各种操作命令(即控制信号)</li><li>受控制：指令寄存器(操作码)、时钟、标志、系统总线控制信号(中断)</li></ul></li><li><p>多级时序</p><ul><li>指令周期：完成（取出并执行）一条指令所需的时间</li><li>机器周期：指令执行过程中一个基准时间，通常以<strong>存取周期</strong>作为机器周期（因为完成指令都需取指，而一次访存时间固定）。一个机器周期内完成若干微操作，可通过节拍控制产生每一个微操作命令</li><li>时钟周期：主频（时钟信号的频率）的倒数，也可称为节拍（时钟信号控制产生，每个节拍宽度对应一个时钟周期）。一个节拍内完成若干需同时执行的操作，是控制计算机操作的最小时间单位</li><li>三者关系：每个指令周期含若干个机器周期，可不相等；每个机器周期含若干个时钟周期（节拍），可不相等</li><li>机器速度：同主频下， 机器周期中时钟周期数和指令周期中机器周期数不同，机器速度不同。（机器周期中含时钟周期少的机器速度更快）</li></ul></li><li><p>控制方式</p><ul><li>同步控制：微操作受统一基准时标时序信号控制。存取周期不统一时，取最长存取周期作为机器周期<ul><li>采用定长的机器周期：采用完全统一、具有相同时间间隔和相同数目节拍</li><li>采用不定长的机器周期：机器周期内节拍数可不等；大多数微操作一个机器周期内完成，复杂微操作延长机器周期或增加节拍</li><li>采用中央控制和局部控制相结合的方法：大部分中央控制，少数局部控制<ul><li>局部控制每一个节拍T*宽度与中央控制节拍宽度相同</li><li>局部控制节拍作为中央控制中机器节拍的延续，插入中央控制的执行周期</li></ul></li></ul></li><li>异步控制：不存在基准时标信号，微操作时序由专用的应答线路控制。控制器发出某一个微操作命令后，等待执行部件完成该操作时所发回的应答信号，再开始执行下一个操作</li><li>联合控制：同步与异步结合。即大多数微操作在同步时序信号控制下进行，而对时间难以确定的微操作（如I/O相关）采用异步控制</li></ul></li></ul><hr><h4 id="控制单元设计"><a href="#控制单元设计" class="headerlink" title="控制单元设计"></a><span id="cu2">控制单元设计</span></h4><ul><li><p>组合逻辑控制器</p><ul><li>采用硬连线逻辑：一个微操作命令对于一个逻辑电路</li><li>思路清晰，简单明了</li><li>结构复杂，线路复杂。一旦构成，除非物理上重新连线，否则无法增加新的控制功能</li></ul></li><li><p>组合逻辑与微程序控制组成异同</p><ul><li><p>同：均有PC、IR、时序电路、中断系统、状态条件</p></li><li><p>异：</p><ul><li><p>微操作命令序列形成部件不同。组合逻辑核心部件–门电路；微程序核心部件–控制存储器ROM(存放全部微程序)</p></li><li><p>微操作命令及节拍安排的主要差别：</p><ul><li><p>取指阶段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OP(IR) -&gt; ID    //组合逻辑：指令操作码送指令译码器</span><br><span class="line">OP(IR) -&gt; 微地址形成部件   //微程序：指令操作码送微地址形成部件</span><br></pre></td></tr></table></figure></li><li><p>微程序每条指令都要增加一个将微指令下地址字段送CMAR的微操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ad(CMDR) -&gt; CMAR</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><ul><li>微程序控制器<ul><li>采用存储逻辑：每条机器指令编写成一个微程序，每一个微程序包含若干条微指令（操作控制字段+顺序控制字段），每一条微指令对应一个或几个微操作命令</li><li>优点：规整形、灵活性、可维护性</li><li>控制器中微程序个数 = 机器指令数 + 3（取指/间址/中断周期)</li><li>组成<ul><li>控存：存放全部微程序</li><li>CMAR（控存地址寄存器）：存放欲读出微指令地址。采用增量计数器法形成后续微指令地址时，有计数功能</li><li>CMDR（控存数据寄存器）：存放取出的微指令</li><li>顺序逻辑：控制微指令序列</li><li>输入：微地址形成部件、微指令下地址字段、外来标志</li><li>输出：CPU内部和系统总线的控制信号</li></ul></li><li>微指令编码方式<ul><li>直接编码（直接控制）：操作控制字段每一位代表一个微命令<ul><li>简单直观，输出直接用于控制，执行速度快</li><li>微指令字较长，使控存容量大</li></ul></li><li>字段直接编码（显示编码）：操作控制字段分段，每个字段经译码发出微操作命令，且互斥<ul><li>缩短字长，以较少二进制信息表示较多微命令信号</li><li>增加译码电路，执行速度降低</li></ul></li><li>字段间接编码（隐式编码）：一个字段某些命令需由另一字段某些微命令解释<ul><li>更能缩短微指令字长，但速度更慢</li></ul></li></ul></li><li>微指令序列地址形成<ol><li>直接由微指令的下地址字段给出</li><li>根据机器指令的操作码形成</li><li>增量计数器法，即 （CMAR）+ 1 -&gt; CMAR</li><li>根据各钟标志决定微指令分支转移的地址</li><li>测试网络形成</li><li>硬件直接产生微程序入口地址 </li></ol></li><li>微指令格式<ul><li>水平型：一次能定义<strong>多个并行操作</strong>的微命令。直接编码、字段直接编码、字段间接编码以及直接及混合编码都属于水平型指令格式<ul><li>大多数微命令可直接控制对象，故每条微指令执行时间短</li><li>微指令字长较长，故可用较少微指令数实现一条机器指令的功能</li></ul></li><li>垂直型：采用类似机器指令操作码方式，在微指令中设置<strong>微操作码</strong>字段，由微操作码规定微指令功能<ul><li>经过译码控制对象，影响执行时间</li><li>微指令字长较短，实现一条机器指令微程序比水平型微指令长的多，以较长微程序结构换取较短微指令结构</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
