<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/2019/07/05/computer-struct/"/>
      <url>/2019/07/05/computer-struct/</url>
      
        <content type="html"><![CDATA[<p><font color="#008000"> [Updated] </font>本文梳理了《计算机组成原理》的基础知识</p><a id="more"></a><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><table><thead><tr><th align="center">Chapter 1</th><th align="center">Chapter 2</th><th align="center">Chapter 3</th><th align="center">Chapter 4</th><th align="center">Chapter 5</th><th align="center">Chapter 6</th><th align="center">Chapter 7</th><th align="center">Chapter 8</th></tr></thead><tbody><tr><td align="center"><a href="#bus">总线</a></td><td align="center"><a href="#mm">存储器</a></td><td align="center"><a href="#io">I/O</a></td><td align="center"><a href="#cal">计算的运算方法</a></td><td align="center"><a href="#instruct">指令系统</a></td><td align="center"><a href="#cpu">CPU</a></td><td align="center"><a href="#cu1">控制单元</a></td><td align="center"><a href="#cu2">控制单元的设计</a></td></tr></tbody></table><hr><h4 id="总线"><a href="#总线" class="headerlink" title="总线"></a><span id="bus">总线</span></h4><ul><li><p>判优控制</p><p>  ！当总线上各个主设备同时请求占用总线时，总线控制器按一定优先等级确定某个设备可以占用总线。</p><p>  ？总线特点为某一刻时刻只允许一个设备向总线发送信息，若两个以上部件同时向总线发送信息，势必导致信号冲突传输无效。</p><ul><li>链式查询<ul><li>1 BR、1 BS、1 BG</li><li>优：优先级固定；结构简单、易扩充</li><li>缺：电路故障敏感，第i个有故障，第i个以后皆无法工作</li></ul></li><li>计数器定时查询<ul><li>1 BR、1 BS、1bN设备地址线</li><li>优：优先级可不固定；电路故障不如链式查询敏感</li><li>缺：控制比链式查询复杂</li></ul></li><li>独立请求<ul><li>N BR、N BS、N BG</li><li>优：响应速度快；优先级控制灵活，可预先固定，也可通过程序改变；可屏蔽设备请求</li><li>缺：仲裁线路复杂</li></ul></li></ul></li><li><p>通信控制</p><p>  ！解决通信双方如何获知传输开始和传输结束，以及通信双方如何协调配合。</p><p>  ？因为总线由众多部件共享，在传送时间上只能用分时方式解决，故通信双方必须按某种约定的方式进行通信。</p><ul><li>同步通信<ul><li>采用公共时钟信号控制，统一传输周期（必须按最慢速度部件设计）</li><li>适用：总线长度较短，各部件存取时间相较一致</li></ul></li><li>异步通信<ul><li>没有公共时钟，采用应答式通信，无固定传输周期</li><li>全互锁（完全制约，可靠性最高）/半互锁（简单制约）/不互锁（无制约）</li><li>适用：总线各部件速度不一致</li></ul></li><li>分离式通信<ul><li>总线传输周期分为两个子周期供不同模块占用，总线上无等待时间，最充分发挥了总线的有效占用</li></ul></li><li>半同步通信<ul><li>既有公共时钟，又允许速度不同的模块和谐工作，采用插入等待周期的措施协调通信双方的配合问题</li></ul></li></ul></li><li><p>串行传输与并行传输</p><ul><li>串行传输<ul><li>数据在一条线路上按位依次传输</li><li>成本低，但速度慢，适合远距离的传输</li></ul></li><li>并行传输<ul><li>每个数据位都有一条独立传输线路，所有数据按位同时传输</li><li>成本高，速度快，适合近距离、高速传输</li></ul></li></ul></li><li><p>总线复用</p><ul><li>不同信号（数据/地址）共用同一组物理线路，分时使用</li><li>需先给地址信号，然后用地址锁存信号将其保存</li></ul></li><li><p>总线带宽（MBps）：单位时间总线上可传输数据位数，也称“数据传输率”</p><ul><li>影响因素：总线宽度、传输距离、主频</li><li>总线带宽 = 一个传输周期传输字节数/时钟周期 | 一个传输周期传输字节数*时钟频率</li></ul></li></ul><hr><h4 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a><span id="mm">存储器</span></h4><ul><li><p>芯片：16K×8位/16KB</p><ul><li>地址线 = 14根</li><li>数据线 = 32根</li><li>引出线最少数目 = 数据线+地址线+2</li></ul></li><li><p>多体结构存储器</p><p>  将存储器分成若干个（n个）独立的模块，每个模块的容量和存取周期均相等，且可独立进行读写操作。将独立模块：</p><ul><li>高位交叉编址<ul><li>各模块分别响应不同请求源，实现多体并行</li><li>高位–存体号，低位–选择存储体内的字</li></ul></li><li>低位交叉编址，<ul><li>不改变存取周期的前提下，增加存储器带宽，n个模块则带宽提高至n倍</li><li>高位–选择存储体内的字，低位–存体号</li><li>存取周期T，总线传输周期t，连续读取n个字时间=T+（n-1）t</li></ul></li></ul></li><li><p>提高访存的措施</p><ul><li>采用高速器件，选用存取周期短的芯片，提高存储器速度</li><li>采用缓存，CPU将近期要用的信息先调入缓存，而缓存速度比主存快得多，CPU从缓存存取信息则缩短访存时间，提高了访存速度</li><li>调整主存结构，如采用单体多字结构或多体结构（都增加存储器带宽）</li></ul></li><li><p>程序访问的局部性原理</p><ul><li>由于指令和数据在主存的地址分布不是随机的，而是相对地聚簇，故程序执行时对存储器的访问使不均匀的</li><li>利用该原理：对缓存-主存，把CPU最近期执行的程序放在容量较小速度较高的缓存中；对主存-辅存，把程序中访问频度高、比较活跃的部分放在主存中。既提高了访存速度又扩大了存储器容量</li></ul></li><li><p>地址映射（硬件完成）</p><ul><li>直接<ul><li>假设C块缓存，每个主存块j只与一个缓存块i对应：i = j mod C</li><li>映射简单，但主存块只能固定对应某个缓存块，不够灵活、命中率低</li></ul></li><li>全相联<ul><li>主存任一块都可以映射到缓存中的任一块上</li><li>灵活、命中率高，但所需电路多、成本高</li></ul></li><li>组相联<ul><li>把缓存分Q组，组内分R块，主存块号j映射到缓存组号i内任一块：i = j mod Q，缓存内1~R任一块</li><li>比直接灵活、命中率高，比全相联成本低，是两者的折中，广泛应用</li></ul></li></ul></li><li><p>三级存储系统（平衡–速度、容量、价格）</p><ul><li>高速缓存<ul><li>解决：CPU和主存速度匹配，提高访存速度缓存</li><li>管理：硬件和操作系统完成</li><li>地址对用户透明</li></ul></li><li>虚存<ul><li>解决：扩大存储容量</li><li>管理：硬件和操作系统完成</li><li>CPU不直接访问二级存储器</li></ul></li></ul></li><li><p>RAM刷新</p><ul><li>方式：集中/分散/异步</li><li>原因：存储电荷电容放电    </li></ul></li></ul><hr><h4 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a><span id="io">I/O</span></h4><ul><li><p>I/O编址方式</p><ul><li>独立编址：I/O地址与主存地址分开，不占主存容量，但需要专用I/O指令访I/O</li><li>统一编址：在主存地址划出一定范围作I/O地址，通过访存指令访问I/O，但减少了主存容量</li></ul></li><li><p>主机与I/O交换信息的控制方式</p><ul><li>程序查询<ul><li>主机与I/O串行工作</li></ul></li><li>程序中断<ul><li>主机与I/O并行工作,主程序和信息传送串行</li></ul></li><li>DMA<ul><li>主机与I/O并行工作,主程序和信息传送并行</li></ul></li><li>通道</li><li>I/O处理机</li></ul></li><li><p>程序查询</p><ul><li>CPU启动I/O后停止现行程序，插入一段程序时刻查询I/O设备准备状况，等待I/O准备就绪时可实现信息交换，存在“踏步”现象</li></ul></li><li><p>程序中断</p><ul><li>管理（多重）中断硬件<ol><li>中断请求触发器（INT）：标志中断源向CPU提出中断请求</li><li>中断屏蔽触发器（MASK）：为“1”表示屏蔽该中断源</li><li>排队器：中断判优</li><li>向量地址形成部件：产生中断源向量地址</li><li>允许中断触发器（EINT）：为“1”允许处理中断</li><li>中断标志触发器（INTR）：标志进入中断周期</li><li>堆栈：保护现场</li><li>中断查询信号电路：每条指令执行周期结束时刻，向各中断源发查询信号</li></ol></li><li>过程：<ol><li>中断请求：CPU启动I/O设备，I/O准备就绪后向CPU提出中断请求</li><li>中断判优：中断判优逻辑选择优先级最高的中断请求，待CPU处理</li><li>中断响应：若INT（中断请求触发器）为”1”且请求中断设备未被屏蔽，系统进入中断响应周期–CPU自动执行中断隐指令[ 硬件完成：保护程序断点(即PC内容)、硬件关中断、向量地址送PC（硬件向量法）或中断识别程序入口地址送PC（软件查询法） ]</li><li>中断服务：中断响应周期结束，CPU转入取指周期，按向量地址取出无条件转移指令（或按向量地址查入口地址表）；转至向量地址对应的中断程序服务入口地址，开始执行中断服务程序[ 保护现场（PC内容–中断隐指令；寄存器内容–软件编程）、与I/O传送信息、恢复现场 ]</li><li>中断返回：中断服务程序最后一条即中断返回指令（返回程序断点）</li></ol></li><li>响应条件和时间：<ul><li>条件：EINT为“1”（即开中断）；中断请求未被屏蔽，且排队后被选中</li><li>时间：指令执行阶段的结束时刻，CPU发出中断查询信号，才能获取中断请求信号</li></ul></li><li>向量地址<ul><li>存放服务程序入口地址的存储单元地址，由硬件形成</li><li>当有中断请求且排队选中时，通过自由组合逻辑电路组成的向量地址形成部件可形成向量地址</li><li>输入：排队器；输出：中断周期送至PC；传送：<strong>数据总线</strong></li></ul></li><li>开/关中断<ul><li>EINT为“1”时，允许CPU响应中断；EINT为“0”时，CPU不能响应中断</li><li>关中断即将EINT置“0”；开中断即置“1”</li></ul></li></ul></li><li><p>多重中断(主要区别在中断服务程序)：CPU处理中断过程中出现新的中断请求，暂停现行中断处理转至处理新的中断</p><ul><li>多重中断条件<ul><li>必须重新开中断</li><li>优先级更高的中断请求才能中断现行程序（内部中断&gt;不可屏蔽中断&gt;可屏蔽中断）</li></ul></li><li>单重中断：保护现场-&gt;设备服务-&gt;恢复现场-&gt;<strong>开中断</strong>-&gt;中断返回</li><li>多重中断：保护现场-&gt;<strong>开中断</strong>-&gt;设备服务-&gt;恢复现场-&gt;中断返回</li></ul></li><li><p>中断服务程序与调用子程序区别</p><ol><li>中断服务程序与中断时CPU正在运行程序相互独立；子程序与CPU正在运行程序是同一程序的两部分</li><li>除了软中断，中断通常随机产生；子程序调用由CALL指令引起</li><li>中断服务程序入口地址可通过硬件向量法产生向量地址，再由向量地址找到入口地址；子程序调用入口地址由CALL指令地址码给出</li><li>中断需要对多个同时发生的中断进行裁决；子程序调用无此操作</li></ol><ul><li>都要保护程序断点：前者中断隐指令完成；后者CALL指令完成</li><li>都要保护寄存器内容的操作</li></ul></li><li><p>中断和DMA区别</p><ul><li>数据传送：中断靠程序传送；DMA靠硬件传送</li><li>CPU响应时间：中断在一条指令执行结束时响应；DMA在存取周期结束时响应</li><li>异常处理能力：中断有；DMA无</li><li>保护现场：中断需中断现行程序，需保护现场；DMA不需中断现行程序，无需保护现场</li><li>优先级：DMA高于中断</li></ul></li><li><p>DMA</p><ul><li>特点：<ul><li>I/O和CPU并行工作</li><li>主存和I/O接口间有一条直接数据通路</li><li>不中断现行程序，无需保护、恢复现场</li><li>DMA请求占用总线时，若采用周期挪用，CPU暂停一个存取周期访问主存，但可继续自身内部操作（如乘法），即DMA传送和主程序并行</li></ul></li><li>硬件：数据缓存寄存器、DAR、AR、WC、中断机构、DMA控制逻辑</li><li>过程：<ul><li>预处理<ol><li>指明数据传送方向输入（读）/输出（写）</li><li>设备地址送DAR（设备地址寄存器）</li><li>主存地址送AR（主存地址计数器）</li><li>传送数据字数送WC（字计数器）</li><li>启动设备</li></ol></li><li>数据传送<ol><li>主存地址送总线</li><li>数据送I/O设备（或主存）</li><li>修改主存地址和WC</li><li>重复直至数据块传送结束</li></ol></li><li>后处理<ol><li>由中断服务程序作DMA结束处理（测试传送过程是否出错、决定是否继续使用DMA传送数据）</li></ol></li></ul></li><li>DMA和CPU分时使用主存：<ul><li>停止CPU访存<ul><li>DMA在传送数据时独占主存，CPU放弃总线使用权，基本处于不工作或保持原状态，直至DMA传送结束</li></ul></li><li>周期挪用<ul><li>一旦I/O有DMA请求，由I/O设备挪用一个存取周期。此时CPU<strong>可完成自身操作，但要停止访存</strong></li></ul></li><li>DMA和CPU交替访存<ul><li>适用<strong>CPU工作周期比主存存取周期长</strong>时。CPU工作周期的上下半周期由DMA和CPU交替使用访存，使DMA传送和CPU工作效率最高，但硬件逻辑复杂</li></ul></li></ul></li></ul></li></ul><hr><h4 id="计算的运算方法"><a href="#计算的运算方法" class="headerlink" title="计算的运算方法"></a><span id="cal">计算的运算方法</span></h4><ul><li><p>判溢出</p><ul><li>定点机<ul><li>参与运算的两个操作数符号相同，结果的符号与原操作数符号不同，则溢出</li><li>求和时最高进位与次高进位异或结果为1，则溢出</li></ul></li><li>浮点机判溢出<ul><li>当阶码大于最大正阶码时，则溢出</li><li>当阶码小于最小负阶码时，则按机器零处理</li></ul></li></ul></li><li><p>进位：影响加减运算速度的关键</p><ul><li>进位链：传递进位的逻辑电路</li><li>先行进位：高位进位和低位进位同时产生<ul><li>单重分组跳跃进位<ul><li>n位全加器分若干小组，组内进位同时产生，组间串行进位</li></ul></li><li>多重分组跳跃进位<ul><li>n位全加器分若干大组，若干大组内又包含若干小组，大组内各小组进位同时产生，小组内进位同时产生，大组间串行进位</li><li>快于单重，但线路更复杂</li></ul></li></ul></li></ul></li></ul><hr><h4 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a><span id="instruct">指令系统</span></h4><ul><li>不同地址格式指令</li></ul><table><thead><tr><th align="center">地址格式</th><th align="center">访存次数</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">四地址</td><td align="center">4</td><td align="center">A4指出下条指令地址</td></tr><tr><td align="center">三地址</td><td align="center">4</td><td align="center">PC指出下条指令地址</td></tr><tr><td align="center">二地址</td><td align="center">4</td><td align="center">操作结果存回A1、A2或ACC</td></tr><tr><td align="center">一地址</td><td align="center">4</td><td align="center">ACC存放操作数和结果</td></tr></tbody></table><ul><li><p>数据存放方式。存储字长32位，可按字节、半字、字寻址：</p><ul><li>边界对准：数据字地址一定是4的整数倍。所存数据不满足该要求时，填充一个或多个空白字节（浪费存储空间）</li><li>边界不对准：数据字跨两个存储字时需两次访存，并对高低字节位置进行调整后才能取得数据字（影响取数时间）</li></ul></li><li><p>间址/基址/变址：可扩大寻址范围</p><ul><li>通过访存（多次间址多次访存）得到有效地址<ul><li>间址<ul><li>访存导致时间较长（T一次访存 &gt;&gt; T一次寄存器）</li></ul></li></ul></li><li>地址变换（R+A）得到有效地址<ul><li>基址<ul><li>基址寄存器内容由操作系统给定，且在程序执行过程中不可变</li><li>支持多道程序技术的应用</li></ul></li><li>变址<ul><li>变址寄存器内容由用户给定，且在程序执行过程中可变</li><li>适用于处理数组问题</li></ul></li></ul></li></ul></li><li><p>相对/堆栈寻址</p><ul><li>相对：EA = (PC) + A<ul><li>A为位移量（字节），决定寻址范围；可正可负，补码表示</li><li>便于程序浮动，用于转移指令</li></ul></li><li>堆栈：SP +/- ▲ -&gt; PC<ul><li>有效地址在SP中，指令中可少一个指令字段</li><li>▲与主存编址方式相关：按字编址，▲取1；按字节编址，字长16位时▲取2，字长32时▲取4</li></ul></li></ul></li><li><p>RISC（CISC）</p><ol><li>选用频度高简单指令，复杂指令功能由简单指令实现（指令系统复杂庞大）</li><li>指令长度固定，指令格式种类少，寻址方式种类少（不固定、多、多）</li><li>只有LOAD/STORE访存，其余指令皆在寄存器进行（可访存指令不受限制）</li><li>CPU中有多个通用寄存器（设专用寄存器）</li><li>控制器采用组合逻辑控制（微程序）</li><li>采用流水技术，大部分指令1个时钟周期内完成（各指令执行时间相差大，大部分需多个时钟周期）</li><li>采用优化的编译程序（难以用优化编译生成高效代码）</li></ol><ul><li>与CISC比较：<ul><li>提高指令执行速度</li><li>便于设计，可降低硬件设计复杂度</li><li>简化指令功能，有利于编译程序代码优化</li><li>不易实现指令系统兼容</li></ul></li></ul></li></ul><hr><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a><span id="cpu">CPU</span></h4><ul><li><p>CPU</p><ul><li>功能<ul><li>指令控制：控制程序的顺序执行</li><li>操作控制：产生完成每条指令所需控制命令</li><li>时间控制：对各种操作加以时间上的控制</li><li>数据加工：对数据进行算术和逻辑运算</li><li>中断处理：处理计算机在运行过程中出现的异常情况和特殊请求</li></ul></li><li>组成<ul><li>寄存器<ul><li>PC：存放现行指令地址，位数取决于存储器容量</li><li>IR：存放现行指令，位数取决于指令字长</li><li>通用寄存器：存放数据和地址，位数取决于机器字长</li></ul></li><li>指令译码器 + 控制单元CU：根据指令译码在规定时间发出操作命令</li><li>ALU：算术逻辑运算</li><li>中断系统：处理中断</li></ul></li></ul></li><li><p>指令周期：取指+（间址）+执行+（中断）</p><ul><li>执行 -&gt; 中断周期 -&gt; 取值</li><li>存取周期 -&gt; DMA周期 -&gt; 存取周期（指令周期任一阶段皆可）</li></ul></li><li><p>指令流水</p><ul><li>结构相关<ul><li>硬件资源满足不了指令重叠执行的要求，发生资源冲突</li><li>如：同一时间，几条重叠的指令分别取值、取数、存数，发生访存冲突</li></ul></li><li>数据相关<ul><li>指令重叠执行，可能改变操作数的读写访问顺序，导致数据相关冲突</li><li>如：某条指令需要用到前面指令的执行结果，而这些指令在流水线中重叠执行，可能改变对操作数读写访问顺序</li></ul></li><li>控制相关<ul><li>流水线遇到分支指令或其他改变程序计数器PC的指令，造成指令执行顺序的改变</li><li>如：某条指令需等前面指令做出转移方向的决定才能进入流水线</li></ul></li></ul></li><li><p>流水线多发技术</p><ul><li>超标量流水：每个时钟周期内可同时并发多条独立指令，处理器中需配置多个功能部件和指令译码电路，以便同时执行多个操作</li><li>超流水线：在原来的时钟周期内，功能部件被使用多次</li><li>超长指令字：对编译器要求高，充分挖掘指令间潜在并行性（一个时钟周期内，各功能部件无数据相关），把能并行的指令合成一条具有多个操作码（需相应个数功能部件）的超长指令</li></ul></li><li><p>中断系统</p><ul><li>INTR 与 EINT<ul><li>INTR 中断标志触发器：指示CPU是否进入中断周期</li><li>EINT 允许中断触发器：开放或关闭中断系统<ul><li>置“1”：系统开放，允许中断（开中断指令）</li><li>置“0”：关中断（关中断指令、中断隐指令、硬件自动复位）</li></ul></li></ul></li><li>中断判优：在某一时刻可能有多个中断源（中断源请求随机）提出请求，而CPU只能响应一个，故须判优已解决响应优先次序<ul><li>硬件排队：组合逻辑电路实现</li><li>软件排队：程序按优先级（从高至低）顺序查询各中断源</li></ul></li><li>中断服务程序入口地址寻找<ul><li>硬件向量法（向量中断）：当有中断请求时，由硬件产生该中断源对应的向量地址，再由向量地址找到服务程序的入口地址，然后暂停现行程序转至中断服务程序<ul><li>排队器输出 -&gt; <strong>向量地址形成部件</strong> -&gt; 输出向量地址</li><li>向量地址寻找入口地址方式<ul><li>向量地址单元内存放一条无条件转移指令</li><li>在向量地址单元内直接存放入口地址，形成一个中断向量地址表</li></ul></li></ul></li><li>软件查询法：编写<strong>中断识别程序</strong>实现</li></ul></li><li>屏蔽<ul><li>屏蔽触发器：内容即屏蔽字，每个中断源对应一个屏蔽字，为“1”时CPU不响应该中断源请求</li><li>优先级<ul><li>响应优先级：CPU响应各中断源请求的优先次序，通常硬件线路已设置好，不便改动（不采用屏蔽时）</li><li>处理优先级：CPU实际对各中断源请求的处理优先次序（采用屏蔽）</li></ul></li><li>采用屏蔽技术的中断服务流程<ul><li>保护现场 -&gt; 置屏蔽字 -&gt; 开中断 -&gt; 中断服务 -&gt; 关中断 -&gt; 恢复现场 -&gt; 恢复屏蔽字 -&gt; 开中断 -&gt; 中断返回</li></ul></li><li>作用<ul><li>改变处理优先级</li><li>为实现多重中断，屏蔽低级别中断请求对现行中断处理程序的干扰 </li><li>封锁部分中断请求，使程序控制更灵活</li></ul></li></ul></li></ul></li></ul><hr><h4 id="控制单元"><a href="#控制单元" class="headerlink" title="控制单元"></a><span id="cu1">控制单元</span></h4><ul><li><p>控制单元CU</p><ul><li>功能：发出各种操作命令(即控制信号)</li><li>受控制：指令寄存器(操作码)、时钟、标志、系统总线控制信号(中断)</li></ul></li><li><p>多级时序</p><ul><li>指令周期：完成（取出并执行）一条指令所需的时间</li><li>机器周期：指令执行过程中一个基准时间，通常以<strong>存取周期</strong>作为机器周期（因为完成指令都需取指，而一次访存时间固定）。一个机器周期内完成若干微操作，可通过节拍控制产生每一个微操作命令</li><li>时钟周期：主频（时钟信号的频率）的倒数，也可称为节拍（时钟信号控制产生，每个节拍宽度对应一个时钟周期）。一个节拍内完成若干需同时执行的操作，是控制计算机操作的最小时间单位</li><li>三者关系：每个指令周期含若干个机器周期，可不相等；每个机器周期含若干个时钟周期（节拍），可不相等</li><li>机器速度：同主频下， 机器周期中时钟周期数和指令周期中机器周期数不同，机器速度不同。（机器周期中含时钟周期少的机器速度更快）</li></ul></li><li><p>控制方式</p><ul><li>同步控制：微操作受统一基准时标时序信号控制。存取周期不统一时，取最长存取周期作为机器周期<ul><li>采用定长的机器周期：采用完全统一、具有相同时间间隔和相同数目节拍</li><li>采用不定长的机器周期：机器周期内节拍数可不等；大多数微操作一个机器周期内完成，复杂微操作延长机器周期或增加节拍</li><li>采用中央控制和局部控制相结合的方法：大部分中央控制，少数局部控制<ul><li>局部控制每一个节拍T*宽度与中央控制节拍宽度相同</li><li>局部控制节拍作为中央控制中机器节拍的延续，插入中央控制的执行周期</li></ul></li></ul></li><li>异步控制：不存在基准时标信号，微操作时序由专用的应答线路控制。控制器发出某一个微操作命令后，等待执行部件完成该操作时所发回的应答信号，再开始执行下一个操作</li><li>联合控制：同步与异步结合。即大多数微操作在同步时序信号控制下进行，而对时间难以确定的微操作（如I/O相关）采用异步控制</li></ul></li></ul><hr><h4 id="控制单元设计"><a href="#控制单元设计" class="headerlink" title="控制单元设计"></a><span id="cu2">控制单元设计</span></h4><ul><li><p>组合逻辑控制器</p><ul><li>采用硬连线逻辑：一个微操作命令对于一个逻辑电路</li><li>思路清晰，简单明了</li><li>结构复杂，线路复杂。一旦构成，除非物理上重新连线，否则无法增加新的控制功能</li></ul></li><li><p>组合逻辑与微程序控制组成异同</p><ul><li><p>同：均有PC、IR、时序电路、中断系统、状态条件</p></li><li><p>异：</p><ul><li><p>微操作命令序列形成部件不同。组合逻辑核心部件–门电路；微程序核心部件–控制存储器ROM(存放全部微程序)</p></li><li><p>微操作命令及节拍安排的主要差别：</p><ul><li><p>取指阶段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OP(IR) -&gt; ID    //组合逻辑：指令操作码送指令译码器</span><br><span class="line">OP(IR) -&gt; 微地址形成部件   //微程序：指令操作码送微地址形成部件</span><br></pre></td></tr></table></figure></li><li><p>微程序每条指令都要增加一个将微指令下地址字段送CMAR的微操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ad(CMDR) -&gt; CMAR</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><ul><li>微程序控制器<ul><li>采用存储逻辑：每条机器指令编写成一个微程序，每一个微程序包含若干条微指令（操作控制字段+顺序控制字段），每一条微指令对应一个或几个微操作命令</li><li>优点：规整形、灵活性、可维护性</li><li>控制器中微程序个数 = 机器指令数 + 3（取指/间址/中断周期)</li><li>组成<ul><li>控存：存放全部微程序</li><li>CMAR（控存地址寄存器）：存放欲读出微指令地址。采用增量计数器法形成后续微指令地址时，有计数功能</li><li>CMDR（控存数据寄存器）：存放取出的微指令</li><li>顺序逻辑：控制微指令序列</li><li>输入：微地址形成部件、微指令下地址字段、外来标志</li><li>输出：CPU内部和系统总线的控制信号</li></ul></li><li>微指令编码方式<ul><li>直接编码（直接控制）：操作控制字段每一位代表一个微命令<ul><li>简单直观，输出直接用于控制，执行速度快</li><li>微指令字较长，使控存容量大</li></ul></li><li>字段直接编码（显示编码）：操作控制字段分段，每个字段经译码发出微操作命令，且互斥<ul><li>缩短字长，以较少二进制信息表示较多微命令信号</li><li>增加译码电路，执行速度降低</li></ul></li><li>字段间接编码（隐式编码）：一个字段某些命令需由另一字段某些微命令解释<ul><li>更能缩短微指令字长，但速度更慢</li></ul></li></ul></li><li>微指令序列地址形成<ol><li>直接由微指令的下地址字段给出</li><li>根据机器指令的操作码形成</li><li>增量计数器法，即 （CMAR）+ 1 -&gt; CMAR</li><li>根据各钟标志决定微指令分支转移的地址</li><li>测试网络形成</li><li>硬件直接产生微程序入口地址 </li></ol></li><li>微指令格式<ul><li>水平型：一次能定义<strong>多个并行操作</strong>的微命令。直接编码、字段直接编码、字段间接编码以及直接及混合编码都属于水平型指令格式<ul><li>大多数微命令可直接控制对象，故每条微指令执行时间短</li><li>微指令字长较长，故可用较少微指令数实现一条机器指令的功能</li></ul></li><li>垂直型：采用类似机器指令操作码方式，在微指令中设置<strong>微操作码</strong>字段，由微操作码规定微指令功能<ul><li>经过译码控制对象，影响执行时间</li><li>微指令字长较短，实现一条机器指令微程序比水平型微指令长的多，以较长微程序结构换取较短微指令结构</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL基础</title>
      <link href="/2019/07/02/sql/"/>
      <url>/2019/07/02/sql/</url>
      
        <content type="html"><![CDATA[<p><font color="#FF0000"> [Updating] </font> 本文梳理了 SQL 相关知识（基于《SQL基础教程》）</p><a id="more"></a><h1 id="SQL-基础"><a href="#SQL-基础" class="headerlink" title="SQL 基础"></a>SQL 基础</h1><h2 id="数据库和SQL"><a href="#数据库和SQL" class="headerlink" title="数据库和SQL"></a>数据库和SQL</h2><h3 id="数据库是什么"><a href="#数据库是什么" class="headerlink" title="数据库是什么"></a>数据库是什么</h3><p>数据集合</p><h3 id="Why-DBMS"><a href="#Why-DBMS" class="headerlink" title="Why DBMS"></a>Why DBMS</h3><p>若以文本文件或电子制表软件（如 Excel）存储文件有以下缺点：</p><ul><li>无法多人共享数据</li><li>无法提供操作大量数据所需格式</li><li>需要编程实现自动化读写</li><li>无法保证数据安全（数据丢失、数据窃取）</li></ul><p>DBMS 可以实现多个用户同事安全简单地操作大量数据</p><h3 id="DBMS-种类"><a href="#DBMS-种类" class="headerlink" title="DBMS 种类"></a>DBMS 种类</h3><h4 id="关系数据库（Relational-Database，-RDB）"><a href="#关系数据库（Relational-Database，-RDB）" class="headerlink" title="关系数据库（Relational Database， RDB）"></a>关系数据库（Relational Database， RDB）</h4><ul><li>由行和列组成的二维表来管理数据</li><li>用专门的 SQL（Structured Query Language，结构化查询语言）对数据进行操作</li><li>常见 RDB：Oracle、SQL Server、MySQL</li></ul><h4 id="键值存储系统（Key-Value-Store，-KVS）"><a href="#键值存储系统（Key-Value-Store，-KVS）" class="headerlink" title="键值存储系统（Key-Value Store， KVS）"></a>键值存储系统（Key-Value Store， KVS）</h4><ul><li>单纯保存查询所使用的主键（Key）和值（Value）的组<br>合（类似 hash）</li><li>适合大量数据超高速查询</li><li>常见 KVS：Redis</li></ul><h4 id="面向对象数据库（Object-Oriented-Database，-OODB）"><a href="#面向对象数据库（Object-Oriented-Database，-OODB）" class="headerlink" title="面向对象数据库（Object Oriented Database， OODB）"></a>面向对象数据库（Object Oriented Database， OODB）</h4><p>面向对象程序设计中保存对象（数据及其操作的集合）的数据库</p><h4 id="XML-数据库（XML-Database，-XMLDB）"><a href="#XML-数据库（XML-Database，-XMLDB）" class="headerlink" title="XML 数据库（XML Database， XMLDB）"></a>XML 数据库（XML Database， XMLDB）</h4><ul><li>XML：使用类似 HTML 标签来表现数据结构的语言</li><li>XML 数据库常用于存储网络交互数据，可以对 XML 形式的大量数据进行高速处理</li></ul><h4 id="层次数据库（Hierarchical-Database，-HDB）"><a href="#层次数据库（Hierarchical-Database，-HDB）" class="headerlink" title="层次数据库（Hierarchical Database， HDB）"></a>层次数据库（Hierarchical Database， HDB）</h4><ul><li>把数据通过层次结构（树形结构）的方式表现出来</li><li>曾经主流，现已少用</li></ul><h3 id="数据库的结构"><a href="#数据库的结构" class="headerlink" title="数据库的结构"></a>数据库的结构</h3><h4 id="RDBMS的常见系统结构"><a href="#RDBMS的常见系统结构" class="headerlink" title="RDBMS的常见系统结构"></a>RDBMS的常见系统结构</h4><h4 id="表的结构"><a href="#表的结构" class="headerlink" title="表的结构"></a>表的结构</h4><h3 id="SQL概要"><a href="#SQL概要" class="headerlink" title="SQL概要"></a>SQL概要</h3><p>标准SQL<br>SQL语句及其种类</p><h4 id="SQL-的基本书写规则"><a href="#SQL-的基本书写规则" class="headerlink" title="SQL 的基本书写规则"></a>SQL 的基本书写规则</h4><ul><li>以分号（；）结尾</li><li>SQL 不区分关键字大小写；表中数据区分大小写</li><li>SQL 一般书写原则：<ul><li>关键字大写</li><li>表名首字母大写</li><li>其余（列名）小写</li></ul></li></ul><h3 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h3><h4 id="数据库的创建（CREATE-DATABASE语句）"><a href="#数据库的创建（CREATE-DATABASE语句）" class="headerlink" title="数据库的创建（CREATE DATABASE语句）"></a>数据库的创建（CREATE DATABASE语句）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure><h4 id="表的创建（CREATE-TABLE语句）"><a href="#表的创建（CREATE-TABLE语句）" class="headerlink" title="表的创建（CREATE TABLE语句）"></a>表的创建（CREATE TABLE语句）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &lt;表名&gt;</span><br><span class="line">(&lt;列名<span class="number">1</span>&gt; &lt;数据类型&gt; &lt;该列所需约束&gt;,</span><br><span class="line"> &lt;列名<span class="number">2</span>&gt; &lt;数据类型&gt; &lt;该列所需约束&gt;,</span><br><span class="line"> ……</span><br><span class="line"> &lt;列名n&gt; &lt;数据类型&gt; &lt;该列所需约束&gt;,</span><br><span class="line"> &lt;该表约束<span class="number">1</span>&gt;, &lt;该表约束<span class="number">2</span>&gt;, ……);</span><br></pre></td></tr></table></figure><ul><li>NOT NULL 约束只能以列为单位进行设置</li><li>列的数据类型必须指定</li><li>列的约束可以定义时设置，也可以语句末尾设置</li></ul><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><ul><li>数据库/表/列名：半角英文字母、数字、下划线(_)</li><li>标准 SQL 中名称必须以半角英文字母开头</li><li>名称不能重复</li></ul><h4 id="数据类型的指定"><a href="#数据类型的指定" class="headerlink" title="数据类型的指定"></a>数据类型的指定</h4><ul><li>INTEGER：整数</li><li>CHAR：定长字符串<ul><li>括号中指定可存储字符串长度</li><li>超出部分无法输入到列中</li><li>不足部分由半角空格进行补足。如：char(10)存”123”，存储字符占10个字节。取数据的时候，char类型的要用trim()去掉多余的空格</li><li>比 VARCHAR 效率高，空间换时间</li></ul></li><li>VARCHAR：可变长字符串<ul><li>括号指定最大长度</li><li>不足部分<strong>不会</strong>使用半角空格进行补足，会自动裁剪。如：varchar(10)存”123”，存储字符占3个字节</li><li>比 CHAR 节省空间</li></ul></li><li>DATE：日期<ul><li>含年/月/日</li><li>Oracle 中 DATE 型还包含时分秒</li></ul></li></ul><h4 id="约束的设置"><a href="#约束的设置" class="headerlink" title="约束的设置"></a>约束的设置</h4><ul><li>键：指定特定数据时使用的列的组合</li><li>主键（primary key）：可以唯一确定一行数据的列（故无法重复）</li></ul><h3 id="表的删除和更新"><a href="#表的删除和更新" class="headerlink" title="表的删除和更新"></a>表的删除和更新</h3><h4 id="表的删除（DROP-TABLE语句）"><a href="#表的删除（DROP-TABLE语句）" class="headerlink" title="表的删除（DROP TABLE语句）"></a>表的删除（DROP TABLE语句）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> &lt;表名&gt;;</span><br></pre></td></tr></table></figure><ul><li>删除表无法回复，只能重建</li><li>避免到需要恢复数据的场景</li></ul><h4 id="表定义的更新（ALTER-TABLE语句）"><a href="#表定义的更新（ALTER-TABLE语句）" class="headerlink" title="表定义的更新（ALTER TABLE语句）"></a>表定义的更新（ALTER TABLE语句）</h4><p>添加列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &lt;表名&gt; <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> &lt;列的定义&gt;;</span><br></pre></td></tr></table></figure><p>删除列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &lt;表名&gt; <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> &lt;列名&gt;;</span><br></pre></td></tr></table></figure><ul><li>表定义变更（ALTER TABLE）之后无法恢复</li><li>不同数据库提供不同<strong>变更表名（RENAME）</strong>（非标准 SQL）指令。如：MySQL 中，</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TABLE</span> &lt;原表名&gt; <span class="keyword">to</span> &lt;新表名&gt;;</span><br></pre></td></tr></table></figure><h2 id="查询基础"><a href="#查询基础" class="headerlink" title="查询基础"></a>查询基础</h2><h3 id="SELECT语句基础"><a href="#SELECT语句基础" class="headerlink" title="SELECT语句基础"></a>SELECT语句基础</h3><p>列的查询<br>查询出表中所有的列<br>为列设定别名<br>常数的查询<br>从结果中删除重复行<br>根据WHERE语句来选择记录<br>注释的书写方法</p><h3 id="算术运算符和比较运算符"><a href="#算术运算符和比较运算符" class="headerlink" title="算术运算符和比较运算符"></a>算术运算符和比较运算符</h3><p>算术运算符<br>需要注意NULL<br>比较运算符<br>对字符串使用不等号时的注意事项<br>不能对NULL使用比较运算符</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>NOT运算符<br>AND运算符和OR运算符<br>通过括号进行强化<br>逻辑运算符和真值<br>含有NULL时的真值</p><h2 id="聚合与排序"><a href="#聚合与排序" class="headerlink" title="聚合与排序"></a>聚合与排序</h2><h3 id="对表进行聚合查询"><a href="#对表进行聚合查询" class="headerlink" title="对表进行聚合查询"></a>对表进行聚合查询</h3><p>聚合函数<br>计算表中数据的行数<br>计算NULL以外数据的行数<br>计算合计值<br>计算平均值<br>计算最大值和最小值<br>使用聚合函数删除重复值（关键字DISTINCT）</p><h3 id="对表进行分组"><a href="#对表进行分组" class="headerlink" title="对表进行分组"></a>对表进行分组</h3><p>GROUP　　BY子句<br>聚合键中包含NULL的情况<br>使用WHERE子句时GROUP BY的执行结果<br>与聚合函数和GROUP BY子句有关的常见错误</p><h3 id="为聚合结果指定条件"><a href="#为聚合结果指定条件" class="headerlink" title="为聚合结果指定条件"></a>为聚合结果指定条件</h3><p>HAVING子句<br>HAVING子句的构成要素<br>相对于HAVING子句，更适合写在WHERE子句中的条件</p><h3 id="对查询结果进行排序"><a href="#对查询结果进行排序" class="headerlink" title="对查询结果进行排序"></a>对查询结果进行排序</h3><p>ORDER BY子句<br>指定升序或降序<br>指定多个排序键<br>NULL的顺序<br>在排序键中使用显示用别名<br>ORDER　　BY子句中可以使用的列<br>不要使用列编号</p><h2 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h2><h3 id="数据的插入（INSERT语句的使用方法）"><a href="#数据的插入（INSERT语句的使用方法）" class="headerlink" title="数据的插入（INSERT语句的使用方法）"></a>数据的插入（INSERT语句的使用方法）</h3><p>什么是INSERT<br>INSERT语句的基本语法<br>列清单的省略<br>插入NULL<br>插入默认值<br>从其他表中复制数据</p><h3 id="数据的删除（DELETE语句的使用方法）"><a href="#数据的删除（DELETE语句的使用方法）" class="headerlink" title="数据的删除（DELETE语句的使用方法）"></a>数据的删除（DELETE语句的使用方法）</h3><p>DROP TABLE语句和DELETE语句<br>DELETE语句的基本语法<br>指定删除对象的DELETE语句（搜索型DELETE）</p><h3 id="数据的更新（UPDATE语句的使用方法）"><a href="#数据的更新（UPDATE语句的使用方法）" class="headerlink" title="数据的更新（UPDATE语句的使用方法）"></a>数据的更新（UPDATE语句的使用方法）</h3><p>UPDATE语句的基本语法<br>指定条件的UPDATE语句（搜索型UPDATE）<br>使用NULL进行更新<br>多列更新</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>什么是事务<br>创建事务<br>ACID特性</p><h2 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h2><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>视图和表<br>创建视图的方法<br>视图的限制①——定义视图时不能使用ORDER BY子句<br>视图的限制②——对视图进行更新<br>删除视图</p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>子查询和视图<br>子查询的名称<br>标量子查询<br>标量子查询的书写位置<br>使用标量子查询时的注意事项</p><h3 id="关联子查询"><a href="#关联子查询" class="headerlink" title="关联子查询"></a>关联子查询</h3><p>普通的子查询和关联子查询的区别<br>关联子查询也是用来对集合进行切分的<br>结合条件一定要写在子查询中</p><h2 id="函数、谓词、CASE表达式"><a href="#函数、谓词、CASE表达式" class="headerlink" title="函数、谓词、CASE表达式"></a>函数、谓词、CASE表达式</h2><h3 id="各种各样的函数"><a href="#各种各样的函数" class="headerlink" title="各种各样的函数"></a>各种各样的函数</h3><p>函数的种类<br>算术函数<br>字符串函数<br>日期函数<br>转换函数</p><h3 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h3><p>什么是谓词<br>LIKE谓词——字符串的部分一致查询<br>BETWEENT谓词——范围查询<br>IS NULL、IS NOT NULL——判断是否为NULL<br>IN谓词——OR的简便用法<br>使用子查询作为IN谓词的参数<br>EXIST谓词</p><h3 id="CASE表达式"><a href="#CASE表达式" class="headerlink" title="CASE表达式"></a>CASE表达式</h3><p>什么是CASE表达式<br>CASE表达式的语法<br>CASE表达式的使用方法</p><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><h3 id="表的加减法"><a href="#表的加减法" class="headerlink" title="表的加减法"></a>表的加减法</h3><p>什么是集合运算<br>表的加法——UNION<br>集合运算的注意事项<br>包含重复行的集合运算——ALL选项<br>选取表中公共部分——INTERSECT<br>记录的减法——EXCEPT</p><h3 id="联结（以列为单位对表进行联结）"><a href="#联结（以列为单位对表进行联结）" class="headerlink" title="联结（以列为单位对表进行联结）"></a>联结（以列为单位对表进行联结）</h3><p>什么是联结<br>内联结——INNER JOIN<br>外联结——OUTER JOIN<br>3张以上表的联结<br>交叉联结——CROSS JOIN<br>特定的联结语句和过时的语法</p><h2 id="SQL-高级处理"><a href="#SQL-高级处理" class="headerlink" title="SQL 高级处理"></a>SQL 高级处理</h2><h3 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h3><p>什么是窗口函数<br>窗口函数的语法<br>语法的基本使用方法——使用RANK函数<br>无须指定PARTITION BY<br>专用窗口函数的种类<br>窗口函数的适用范围<br>作为窗口函数使用的聚合函数<br>计算移动平均<br>两个ORDER BY</p><h3 id="GROUPING运算符"><a href="#GROUPING运算符" class="headerlink" title="GROUPING运算符"></a>GROUPING运算符</h3><p>同时计算出合计值<br>ROLLUP——同时计算出合计值和小计值<br>GROUPING函数——让NULL更加容易分辨<br>CUBE——用数据来搭积木<br>GROUPING SETS——取得期望的积木</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + NexT 的问题</title>
      <link href="/2019/06/30/hexo_problem_list/"/>
      <url>/2019/06/30/hexo_problem_list/</url>
      
        <content type="html"><![CDATA[<p><font color="#FF0000"> [Updating] </font> 本文记录了 Hexo + NexT 使用过程中的一些问题</p><a id="more"></a><p>版本声明</p><ul><li>hexo: 3.9.0</li><li>next: 7.0.1</li></ul><h2 id="local-search-不能用"><a href="#local-search-不能用" class="headerlink" title="local_search 不能用"></a>local_search 不能用</h2><p>打开首页（本地or线上），打开浏览器开发工具 Network 选项卡，点击首页“搜索”按钮，观察 search.xml 状态：</p><ul><li>200<ul><li>问题：Algolia 问题</li><li>解决：<strong>主题配置</strong>文件中关闭 Algolia</li></ul></li><li>404</li><li>其他<ul><li>问题：存在非法字符</li><li>解决：sublime 排查 .md 文件中所存在非法字符</li></ul></li></ul><h2 id="post-meta-不显示更新时间"><a href="#post-meta-不显示更新时间" class="headerlink" title="post_meta 不显示更新时间"></a>post_meta 不显示更新时间</h2><p>修改主题配置文件，post_meta 模块中设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updated:</span><br><span class="line"> enable: true</span><br><span class="line"> anotherday: false</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github + Hexo 搭建博客</title>
      <link href="/2019/05/30/hexo/"/>
      <url>/2019/05/30/hexo/</url>
      
        <content type="html"><![CDATA[<p><font color="#FF0000"> [Updating] </font> 本文记录了使用Github和Hexo搭建该博客的过程</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>系统：ubuntu 18.04</li><li>nodejs:：</li></ul><h2 id="Hexo-的安装"><a href="#Hexo-的安装" class="headerlink" title="Hexo 的安装"></a>Hexo 的安装</h2><h3 id="Node-js-的安装"><a href="#Node-js-的安装" class="headerlink" title="Node.js 的安装"></a>Node.js 的安装</h3><h3 id="Hexo-的安装-1"><a href="#Hexo-的安装-1" class="headerlink" title="Hexo 的安装"></a>Hexo 的安装</h3><h2 id="Git-的安装"><a href="#Git-的安装" class="headerlink" title="Git 的安装"></a>Git 的安装</h2><h2 id="初步优化"><a href="#初步优化" class="headerlink" title="初步优化"></a>初步优化</h2>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
